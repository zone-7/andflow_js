'use strict'; var andflow_util = {
    uuid: function () { function a() { return ((1 + Math.random()) * 65536 | 0).toString(16).substring(1) } return a() + a() + "-" + a() + "-" + a() + "-" + a() + "-" + a() + a() + a() }, confirm: function (a, b) { confirm(a) && b() }, extend: function (a, b) { if (a) for (var d in b) a[d] = b[d]; else a = b; return a }, parseHtml: function (a) { var b = document.createElement("div"); b.innerHTML = a; return b.firstChild }, addEventList: function (a, b, d, c) {
        a.eventList ? a.eventList[b] ? a.eventList[b].push({ callback: d, useCapture: c }) : a.eventList[b] = [{
            callback: d,
            useCapture: c
        }] : (a.eventList = {}, a.eventList[b] = [{ callback: d, useCapture: c }])
    }, removeEventList: function (a, b, d, c) { if ((a = a.eventList) && a[b]) if (d) for (c = 0; c < a[b].length; c++) { if (a[b][c].callback === d) { a[b].splice(c, 1); a[b].length === 0 && delete a[b]; break } } else delete a[b] }, getEventList: function (a, b) { var d = a; typeof a === "string" && (d = document.querySelector(a)); if (d) return (a = d.eventList) ? a[b] : null }, addEventListener: function (a, b, d, c) {
        var f = a; typeof a === "string" && (f = document.querySelector(a)); f && (f.addEventListener(b,
            d, c), andflow_util.addEventList(f, b, d, c))
    }, removeEventListener: function (a, b, d, c) { var f = a; typeof a === "string" && (f = document.querySelector(a)); f && (d ? (f.removeEventListener(b, d, c), andflow_util.removeEventList(f, b, d, c)) : (a = andflow_util.getEventList(f, b)) && a.length > 0 && (a.forEach(function (e, g) { e.callback && f.removeEventListener(b, e.callback, e.useCapture) }), andflow_util.removeEventList(f, b))) }, isVisible: function (a) {
        var b = a; typeof a === "string" && (b = document.querySelector(a)); return b ? !(b.style.display === "none" ||
            b.currentStyle && b.currentStyle === "none" || window.getComputedStyle && window.getComputedStyle(b, null).display === "none") : !1
    }, getRect: function (a) { a = a.getBoundingClientRect(); var b = document.documentElement.clientTop, d = document.documentElement.clientLeft; return { top: a.top - b, bottom: a.bottom - b, left: a.left - d, right: a.right - d } }, getLeftInCanvas(a) {
        typeof a === "string" && (a = document.querySelector(a)); if (!a) return 0; for (var b = a.offsetLeft, d = 0; a.parentNode && a.parentNode.className.indexOf("canvas") < 0 && d++ < 100;)b += a.parentNode.offsetLeft,
            a = a.parentNode; return b
    }, getTopInCanvas(a) { typeof a === "string" && (a = document.querySelector(a)); if (!a) return 0; for (var b = a.offsetTop, d = 0; a.parentNode && a.parentNode.className.indexOf("canvas") < 0 && d++ < 100;)b += a.parentNode.offsetTop, a = a.parentNode; return b }, getPageLeft: function (a) { typeof a === "string" && (a = document.querySelector(a)); return a ? andflow_util.getRect(a).left + window.scrollX : 0 }, getPageTop: function (a) {
        typeof a === "string" && (a = document.querySelector(a)); return a ? andflow_util.getRect(a).top + window.scrollY :
            0
    }, show: function (a) { var b = a; typeof a === "string" && (b = document.querySelector(a)); b && (b.style.display = "block") }, hide: function (a) { var b = a; typeof a === "string" && (b = document.querySelector(a)); b && (b.style.display = "none") }, setValue: function (a, b) { var d = a; typeof a === "string" && (d = document.querySelector(a)); d && (a = d.tagName, a == "INPUT" && (d.value = b), a == "SELECT" && (d.value = b), a == "TEXTAREA" && (d.value = b, d.innerHTML = b)) }, getValue: function (a) {
        var b = a; typeof a === "string" && (b = document.querySelector(a)); a = b.tagName; return a ==
            "INPUT" || a == "SELECT" ? b.value : a == "TEXTAREA" ? b.value || b.innerHTML : null
    }, setAttr: function (a, b, d) { var c = a; typeof a === "string" && (c = document.querySelector(a)); if (c) return c.setAttribute(b, d) }, getAttr: function (a, b) { var d = a; typeof a === "string" && (d = document.querySelector(a)); return d ? d.getAttribute(b) : null }, setStyle: function (a, b, d) { var c = a; typeof a === "string" && (c = document.querySelector(a)); c && (c.style[b] = d) }, getStyle: function (a, b) {
        var d = a; typeof a === "string" && (d = document.querySelector(a)); return d ? d.currentStyle ?
            d.currentStyle[b] : window.getComputedStyle ? (b.replace(/([A-Z])/g, "-$1"), a = b.toLowerCase(), document.defaultView.getComputedStyle(d, null)[a]) : null : null
    }, addClass: function (a, b) { var d = a; typeof a === "string" && (d = document.querySelector(a)); if (d) if (b) d.className && d.className.indexOf(b) >= 0 || (d.className ? d.className = d.className + " " + b : d.className = b); else throw Error("\u8bf7\u4f20\u9012\u4e00\u4e2a\u6709\u6548\u7684class\u7c7b\u540d"); }, removeClass: function (a, b) {
        var d = a; typeof a === "string" && (d = document.querySelector(a));
        d && (a = d.className.split(" "), b = a.indexOf(b), b > -1 && a.splice(b, 1), d.className = a.join(" "))
    }, hasClass: function (a, b) { var d = a; typeof a === "string" && (d = document.querySelector(a)); if (d) { if (b) { if (d.className && d.className.indexOf(b) >= 0) return !0 } else throw Error("\u8bf7\u4f20\u9012\u4e00\u4e2a\u6709\u6548\u7684class\u7c7b\u540d"); return !1 } }, removeElement: function (a) { var b = a; typeof a === "string" && (b = document.querySelector(a)); b && (a = b.parentNode) && a.removeChild(b) }, isMobile: function () {
        let a = navigator.userAgent;
        return "Android;iPhone;SymbianOS;Windows Phone;iPad;iPod".split(";").filter(b => a.includes(b)).length ? !0 : !1
    }
}, andflow = {
    containerId: null, img_path: "", editable: !0, tags: null, metadata: null, flowModel: null, show_rulers: !0, show_thumbnail: !0, show_multi_select: !1, show_grid: !0, show_toolbar: !0, show_btn_rulers: !0, show_btn_horizontal: !0, show_btn_vertical: !0, show_btn_code: !0, show_btn_scale: !0, show_btn_thumbnail: !0, metadata_style: "", metadata_position: "left", drag_step: 10, isMobile: !1, multi_select_mode: !1, render_action: null,
    render_action_helper: null, render_link: null, render_endpoint: null, render_btn_resize: null, render_btn_remove: null, event_action_click: null, event_action_dblclick: null, event_action_remove: null, event_group_click: null, event_group_dblclick: null, event_group_remove: null, event_link_click: null, event_link_dblclick: null, event_link_remove: null, event_canvas_click: null, event_canvas_dblclick: null, event_canvas_changed: null, lang: { metadata_tag_all: "\u6240\u6709\u7ec4\u4ef6", delete_action_confirm: "\u786e\u5b9a\u5220\u9664\u8be5\u8282\u70b9?" },
    _themeObj: null, _plumb: null, _actionInfos: {}, _actionScript: {}, _actionCharts: {}, _action_states: [], _actionContents: {}, _linkInfos: {}, _link_states: [], _groupInfos: {}, _listInfos: {}, _tipInfos: {}, _timer_link: null, _timer_group: null, _timer_action: null, _timer_thumbnail: null, _drag_name: null, _animation_timer: null, _event_name_mousedown: "mousedown", _event_name_mouseup: "mouseup", _event_name_mousemove: "mousemove", _event_name_mouseover: "mouseover", _event_name_mouseout: "mouseout", _event_name_click: "click", _event_name_dblclick: "dblclick",
    _event_name_scroll: "scroll", _selecting: !1, _selecting_objs: [], _connectionTypes: {
        Flowchart: { anchor: "Continuous", connector: ["Flowchart", { stub: [5, 15], gap: 5, cornerRadius: 5, alwaysRespectStubs: !0 }] }, Straight: { anchor: "Continuous", connector: ["Straight", { stub: [5, 15], gap: 5, cornerRadius: 25, alwaysRespectStubs: !0 }] }, Bezier: { anchor: "Continuous", connector: ["Bezier", { stub: [5, 15], gap: 5, cornerRadius: 25, alwaysRespectStubs: !0 }] }, StateMachine: {
            anchor: "Continuous", connector: ["StateMachine", {
                stub: [5, 15], gap: 5, cornerRadius: 25,
                margin: 5, alwaysRespectStubs: !0
            }]
        }
    }, _initHtml: function (a) {
        var b = ""; this.editable == 0 && (b = "state"); var d = ""; if (this.show_toolbar == 0 || this.show_toolbar == "false") d = "toolbar_hide"; var c = this.metadata_style; if (c == null || c == "") this.metadata_position == "top" ? c = "metadata_float_top" : this.metadata_position == "left" && (c = "metadata_float_left"); b = '<div class="andflow  ' + c + " " + b + " " + d + '"><div class="metadata" ><div class="tags">'; b += '<select id="tag_select">'; b += "</select>"; b += "</div>"; b += '<div class="actions">'; b +=
            '<ul id="actionMenu" class="actionMenu" >'; b += "</ul>"; b += "</div>"; b += "</div>"; b += '<div class="designer">'; b += '<div class="flow_tools">'; b += '<div class="left">'; b += '<a class="nav_btn">&nbsp;</a>'; b += "</div>"; b += '<div class="right">'; this.show_btn_code && (b += '<a class="code_btn" title="code">&nbsp;</a>'); this.show_btn_rulers && (b += '<a class="ruler_btn" title="rule">&nbsp;</a>'); this.show_btn_vertical && (b += '<a class="vertical_btn" title="vertical">&nbsp;</a>'); this.show_btn_horizontal && (b += '<a class="horizontal_btn" title="horizontal">&nbsp;</a>');
        this.show_btn_scale && (b += '<a class="scale_down_btn" title="\u7f29\u5c0f">-</a>', b += '<a class="scale_info" title="\u8fd8\u539f"><span class="scale_value">100</span><span>%</span></a>', b += '<a class="scale_up_btn"  title="\u653e\u5927">+</a>'); this.show_btn_thumbnail && (b += '<a class="thumbnail_btn"  title="\u7f29\u7565\u56fe">&nbsp;</a>'); b += "</div>"; b += "</div>"; d = ""; this.show_grid || (d = "background:none"); b += '<div id="canvasContainer" class="canvasContainer" >'; b += '<div  class="ruler_h"><canvas></canvas><div class="scope"></div></div>';
        b += '<div  class="ruler_v"><canvas></canvas><div class="scope"></div></div>'; b += '<div class="flow_thumbnail">'; b += '<div class="flow_thumbnail_mask"></div>'; b += "</div>"; b += '<div id="canvasBox" class="canvasBox"  style="' + d + '">'; b += '<div class="multi_select_box"></div>'; b += '<div class="multi_select_dragging"></div>'; b += '<div id="canvas" class="canvas canvas_move" ></div>'; b += "</div>"; b += "</div>"; b += '<div id="codeContainer" class="codeContainer">'; b += "<textarea></textarea>"; b += "</div>"; b += "</div>"; b +=
            "</div>"; b = andflow_util.parseHtml(b); document.getElementById(a).innerHTML = ""; document.getElementById(a).appendChild(b); document.getElementById(a).style.position = document.getElementById(a).style.position || "relative"; andflow_util.setAttr("#" + a + " .nav_btn", "state", "open"); andflow_util.setAttr("#" + a + " .thumbnail_btn", "state", "close"); this.show_rulers ? this._showRulers() : this._hideRulers(); this.show_thumbnail ? this._showThumbnail() : this._hideThumbnail()
    }, _getContainer: function () { return document.getElementById(this.containerId) },
    _initAnimaction: function () {
        var a = this; this._animation_timer && clearInterval(this._animation_timer); this._animation_timer = setInterval(function () {
            var b = a._plumb.getAllConnections(), d; for (d in b) {
                var c = b[d]; if (a.getLinkInfo(c.sourceId, c.targetId).animation) {
                    var f = c.getOverlay("arrow_source"), e = c.getOverlay("arrow_target"), g = 0; !f.visible && e.visible ? g = 1 : f.visible && !e.visible && (g = 2); c = c.getOverlay("animation"); c.setVisible(!0); g == 1 ? (c.loc += .05, c.loc > .9 && (c.loc = .1)) : g == 2 ? (c.loc -= .05, c.loc < .1 && (c.loc = .9)) :
                        c.diract == null || c.diract == 1 ? (c.loc += .05, c.loc > .9 && (c.diract = 2)) : (c.loc -= .05, c.loc < .1 && (c.diract = 1))
                } else c = c.getOverlay("animation"), c.setVisible(!1)
            }
        }, 100)
    }, _initEvents: function () {
        var a = this, b = a.containerId, d = a._getContainer(); document.addEventListener("keydown", function (c) { c.shiftKey && a._openSelectState() }); document.addEventListener("keyup", function (c) { c.key === "Shift" && a._closeSelectState() }); andflow_util.addEventListener(d.querySelector(".nav_btn"), "click", function (c) {
            andflow_util.getAttr("#" +
                a.containerId + " .nav_btn", "state") == "open" ? (andflow_util.setAttr("#" + b + " .nav_btn", "state", "close"), andflow_util.addClass("#" + b + " .andflow", "fold"), andflow_util.addClass("#" + b + " .nav_btn", "close")) : (andflow_util.setAttr("#" + b + " .nav_btn", "state", "open"), andflow_util.removeClass("#" + b + " .andflow", "fold"), andflow_util.removeClass("#" + b + " .nav_btn", "close"))
        }); andflow_util.addEventListener(d.querySelector(".scale_up_btn"), "click", function (c) {
            c = a._getContainer().querySelector(".scale_value").innerHTML *
            1; c += 1; andflow_util.setStyle("#" + b + " .canvas", "transform", "scale(" + c / 100 + ")"); a._getContainer().querySelector(".scale_value").innerHTML = c
        }); andflow_util.addEventListener(d.querySelector(".scale_down_btn"), "click", function (c) { c = d.querySelector(".scale_value").innerHTML * 1; --c; andflow_util.setStyle("#" + b + " .canvas", "transform", "scale(" + c / 100 + ")"); a._getContainer().querySelector(".scale_value").innerHTML = c }); andflow_util.addEventListener(d.querySelector(".scale_info"), "click", function (c) {
            andflow_util.setStyle("#" +
                b + " .canvas", "transform", "scale(1)"); a._getContainer().querySelector(".scale_value").innerHTML = "100"
        }); andflow_util.addEventListener(d.querySelector(".horizontal_btn"), "click", function (c) { a.horizontal() }); andflow_util.addEventListener(d.querySelector(".vertical_btn"), "click", function (c) { a.vertical() }); andflow_util.addEventListener(d.querySelector(".multi_select_box"), a._event_name_mousedown, function (c) {
            const f = c.pageX, e = c.pageY, g = c.target.offsetLeft, l = c.target.offsetTop; var k = {}; a._selecting_objs.forEach((h,
                m) => { k[h.id] = { x: h.offsetLeft, y: h.offsetTop } }); andflow_util.addEventListener(d, a._event_name_mousemove, function (h) {
                    var m = a._getContainer().querySelector(".multi_select_box"); a._getContainer().querySelector(".canvas"); var n = h.pageX - f + g, u = h.pageY - e + l; n >= 0 && (andflow_util.setStyle(m, "left", n + "px"), a._selecting_objs.forEach((q, p) => { andflow_util.setStyle(q, "left", h.pageX - f + k[q.id].x + "px") })); u >= 0 && (andflow_util.setStyle(m, "top", u + "px"), a._selecting_objs.forEach((q, p) => {
                        andflow_util.setStyle(q, "top", h.pageY -
                            e + k[q.id].y + "px")
                    })); a._plumb.repaintEverything()
                })
        }); andflow_util.addEventListener(d.querySelector(".canvasBox"), a._event_name_mousedown, function (c) {
            const f = d.querySelector(".canvasBox").getBoundingClientRect(), e = c.clientX - f.left + d.querySelector(".canvasBox").scrollLeft, g = c.clientY - f.top + d.querySelector(".canvasBox").scrollTop; a._selecting ? c.target.classList.contains("canvas") ? (c = a._getContainer().querySelector(".multi_select_dragging"), andflow_util.setStyle(c, "left", e + "px"), andflow_util.setStyle(c,
                "top", g + "px"), andflow_util.setAttr(c, "dragging", "true"), andflow_util.setAttr(c, "begin_x", e), andflow_util.setAttr(c, "begin_y", g)) : a._getContainer().querySelectorAll(".andflow_meta").forEach((l, k) => { k = l.offsetLeft; var h = l.offsetTop, m = l.offsetWidth, n = l.offsetHeight; e > k && e < k + m && g > h && g < h + n && a._postSelectObject(l) }) : c.target.classList.contains("canvas") && a._clearSelectObject()
        }); andflow_util.addEventListener(d.querySelector(".canvasBox"), a._event_name_mousemove, function (c) {
            var f = a._getContainer().querySelector(".multi_select_dragging"),
            e = andflow_util.getAttr(f, "dragging"); if (a._selecting && e == "true") {
                const h = andflow_util.getAttr(f, "begin_x"); e = andflow_util.getAttr(f, "begin_y"); var g = d.querySelector(".canvasBox").getBoundingClientRect(), l = c.clientX - g.left + d.querySelector(".canvasBox").scrollLeft, k = c.clientY - g.top + d.querySelector(".canvasBox").scrollTop; c = h; h > l && (c = l); g = e; e > k && (g = k); l = Math.abs(l - h); e = Math.abs(k - e); andflow_util.setStyle(f, "left", c + "px"); andflow_util.setStyle(f, "top", g + "px"); andflow_util.setStyle(f, "width", l + "px"); andflow_util.setStyle(f,
                    "height", e + "px"); andflow_util.setStyle(f, "display", "block")
            }
        }); andflow_util.addEventListener(d.querySelector(".canvasBox"), a._event_name_mouseup, function (c) {
            c = a._getContainer().querySelector(".multi_select_dragging"); var f = andflow_util.getAttr(c, "dragging"), e = c.offsetLeft, g = c.offsetTop, l = c.offsetWidth, k = c.offsetHeight; a._selecting && f == "true" && a._getContainer().querySelectorAll(".andflow_meta").forEach((h, m) => {
                m = h.offsetLeft + h.offsetWidth / 2; var n = h.offsetTop + h.offsetHeight / 2; m >= e && m <= e + l && n >= g && n <=
                    g + k && a._postSelectObject(h)
            }); andflow_util.setAttr(c, "dragging", "false"); andflow_util.setStyle(c, "display", "none")
        }); andflow_util.addEventListener(d.querySelector(".canvasBox"), a._event_name_scroll, function () { a._posRulers() }); andflow_util.addEventListener(d.querySelector(".canvas"), a._event_name_mousedown, function (c) {
            if (c.target && c.target.className && c.target.className.indexOf && !(c.target.className.indexOf("canvas") < 0)) {
                var f = c.targetTouches ? c.targetTouches[0].pageX : c.pageX, e = c.targetTouches ? c.targetTouches[0].pageY :
                    c.pageY, g = c.offsetX; c = c.offsetY; g ||= f - andflow_util.getPageLeft("#" + b + " .canvas"); c ||= e - andflow_util.getPageTop("#" + b + " .canvas"); andflow_util.setAttr("#" + b + " .canvas", "drag", "true"); andflow_util.setAttr("#" + b + " .canvas", "offset_x", g); andflow_util.setAttr("#" + b + " .canvas", "offset_y", c); andflow_util.setAttr("#" + b + " .canvas", "page_x", f); andflow_util.setAttr("#" + b + " .canvas", "page_y", e); andflow_util.addClass("#" + b + " .canvas", "canvas_moveing"); a._resizeCanvas()
            }
        }); andflow_util.addEventListener(d.querySelector(".canvas"),
            a._event_name_mouseup, function (c) { andflow_util.getAttr("#" + b + " .canvas", "drag") == "true" && a._onCanvasChanged(); andflow_util.setAttr("#" + b + " .canvas", "drag", "false"); andflow_util.removeClass("#" + b + " .canvas", "canvas_moveing"); a.event_canvas_click && (a.event_canvas_dblclick ? (a._timer_action && clearTimeout(a._timer_action), a._timer_action = setTimeout(function () { a.event_canvas_click(c) }, 300)) : a.event_canvas_click(c)) }); andflow_util.addEventListener(d.querySelector(".canvas"), "mouseout", function (c) {
                andflow_util.setAttr("#" +
                    b + " .canvas", "drag", "false")
            }); andflow_util.addEventListener(d.querySelector(".canvas"), a._event_name_mousemove, function (c) {
                if (andflow_util.getAttr("#" + b + " .canvas", "drag") == "true") {
                    let k = andflow_util.getAttr("#" + b + " .canvas", "offset_x"); var f = andflow_util.getAttr("#" + b + " .canvas", "offset_y"), e = c.targetTouches ? c.targetTouches[0].pageX : c.pageX, g = c.targetTouches ? c.targetTouches[0].pageY : c.pageY, l = c.offsetX; c = c.offsetY; l ||= e - andflow_util.getPageLeft("#" + b + " .canvas"); c ||= g - andflow_util.getPageTop("#" +
                        b + " .canvas"); e = l - k; g = c - f; f = a._getContainer().querySelector(".canvasBox").scrollLeft - e; e = a._getContainer().querySelector(".canvasBox").scrollTop - g; a._getContainer().querySelector(".canvasBox").scrollLeft = f; a._getContainer().querySelector(" .canvasBox").scrollTop = e
                }
            }); andflow_util.addEventListener(d.querySelector(".canvas"), a._event_name_dblclick, function (c) { a.event_canvas_dblclick && (a._timer_action && clearTimeout(a._timer_action), a.event_canvas_dblclick(c)) }); andflow_util.addEventListener(d.querySelector(".code_btn"),
                "click", function (c) { try { andflow_util.isVisible("#codeContainer") ? a._showDesigner() : a._showCode() } catch (f) { console.error(f) } }); andflow_util.addEventListener(d.querySelector(".ruler_btn"), "click", function (c) { a.show_rulers ? a._hideRulers() : a._showRulers() }); andflow_util.addEventListener(d.querySelector(".thumbnail_btn"), "click", function (c) { andflow_util.getAttr("#" + b + " .thumbnail_btn", "state") == "open" ? a._hideThumbnail() : a._showThumbnail() }); andflow_util.addEventListener(d.querySelector(".flow_thumbnail_mask"),
                    a._event_name_mousedown, function (c) {
                        const f = c.pageX, e = c.pageY, g = c.target.offsetLeft, l = c.target.offsetTop; andflow_util.addEventListener(d, a._event_name_mousemove, function (k) {
                            var h = a._getContainer().querySelector(".flow_thumbnail_mask"); if (h) {
                                var m = h.parentElement, n = k.pageX - f + g; k = k.pageY - e + l; n < 0 && (n = 0); k < 0 && (k = 0); n + h.offsetWidth > m.offsetWidth && (n = m.offsetWidth - h.offsetWidth); k + h.offsetHeight > m.offsetHeight && (k = m.offsetHeight - h.offsetHeight); andflow_util.setStyle(h, "left", n + "px"); andflow_util.setStyle(h,
                                    "top", k + "px"); m = a._getContainer().querySelector(".canvas").parentElement; n = m.offsetWidth / h.offsetWidth; k = h.offsetTop * n; m.scrollLeft = h.offsetLeft * n; m.scrollTop = k
                            }
                        })
                    }); andflow_util.addEventListener(d, a._event_name_mouseup, function (c) {
                        a._hideScope(); c.target && c.target.className && c.target.className.indexOf && c.target.className.indexOf("canvas") >= 0 && d.querySelectorAll(".canvas .focus").forEach(function (h) { andflow_util.removeClass(h, "focus") }); if (c = document.getElementById("drag_helper")) {
                            var f = document.querySelector("#" +
                                a.containerId + " .canvas"), e = c.getAttribute("p_x") || 10, g = c.getAttribute("p_y") || 10, l = c.getAttribute("page_x") || 0, k = c.getAttribute("page_y") || 0; l >= 0 && k >= 0 && (e = l - andflow_util.getPageLeft(f) - e * 1, f = k - andflow_util.getPageTop(f) - g * 1, e >= 0 && f >= 0 && a._dropComponent(a._drag_name, e, f)); andflow_util.removeElement(c)
                        } andflow_util.removeEventListener(this, a._event_name_mousemove); andflow_util.setStyle("#" + a.containerId, "cursor", "default"); a._drag_name = null
                    })
    }, _initTheme: function (a) { this.setTheme(a) }, _initMetadata: function () {
        var a =
            this, b = this.tags || [], d = this.metadata || []; b == null && (b = []); d == null && (d = []); var c = "<script>\n", f; for (f in d) c += d[f].params_script || "", c += "\n"; d = andflow_util.parseHtml(c + "\x3c/script>"); document.body.appendChild(d); if (d = document.querySelector("#tag_select")) {
                d.innerHTML = ""; c = andflow_util.parseHtml('<option value="">' + a.lang.metadata_tag_all + "</option>"); d.appendChild(c); for (f in b) c = b[f], c != null && c != "" && d.appendChild(andflow_util.parseHtml('<option value="' + c + '">' + c + "</option>")); andflow_util.addEventListener(document.getElementById("tag_select"),
                    "change", function (e) { e = andflow_util.getValue("#tag_select"); a._showMetadata(e) }); b = andflow_util.getValue("#tag_select"); a._showMetadata(b)
            } else a._showMetadata("")
    }, _dropComponent: function (a, b, d) {
        var c = this.getMetadata(a); if (c) if (c.tp == "group") a = { id: "group_" + andflow_util.uuid().replaceAll("-", ""), name: c.name, left: b, top: d, members: [] }, this._createGroup(a); else if (c.tp == "list") a = { id: "list_" + andflow_util.uuid().replaceAll("-", ""), name: c.name, left: b, top: d, items: [] }, this._createList(a); else if (c.tp == "tip") a =
            { id: "tip_" + andflow_util.uuid().replaceAll("-", ""), name: c.name, left: b, top: d, content: "" }, this._createTip(a); else { b = { id: andflow_util.uuid().replaceAll("-", ""), left: b, top: d, name: a, params: {} }; if (c != null) for (var f in c.params) d = c.params[f], a = d.name, (d = d.default) && (b.params[a] = d); a == "begin" && document.querySelector(".action[name='begin']") || a == "end" && document.querySelector(".action[name='end']") || (b.title = b.title || c.title, this._createAction(b)) }
    }, _initPlumb: function () {
        var a = this; a._plumb != null && (a._plumb.destroy(),
            document.querySelector("#" + this.containerId + " #canvas").innerHTML = ""); var b = this._themeObj.default_link_color, d = this._themeObj.default_link_radius, c = this._themeObj.default_link_strokeWidth, f = this._themeObj.default_link_color_hover, e = this._themeObj.default_link_strokeWidth_hover, g = this._themeObj.default_link_outlineWidth, l = this._themeObj.default_endpoint_stroke_color, k = this._themeObj.default_endpoint_stroke_color_hover, h = this._themeObj.default_endpoint_fill_color, m = this._themeObj.default_endpoint_fill_color_hover,
                n = this._themeObj.default_endpoint_radius, u = this._themeObj.default_endpoint_radius_hover, q = this._themeObj.default_endpoint_strokeWidth, p = this._themeObj.default_endpoint_strokeWidth_hover, t = a._connectionTypes[this.flowModel.link_type || "Flowchart"].connector; t.cornerRadius = d; this._plumb = jsPlumb.getInstance({
                    Endpoint: ["Dot", { radius: 5 }], Connector: t, Anchor: "Center", EndpointStyle: { stroke: l, fill: h, radius: n, strokeWidth: q }, EndpointHoverStyle: { stroke: k, fill: m, radius: u, strokeWidth: p }, PaintStyle: {
                        stroke: b, radius: d,
                        strokeWidth: c, outlineStroke: "transparent", outlineWidth: g
                    }, HoverPaintStyle: { stroke: f, strokeWidth: e }, ConnectionOverlays: [["Arrow", { location: 0, id: "arrow_source", length: 10, width: 10, direction: -1, foldback: .8, show: !1 }], ["Label", { label: "X", id: "label_remove", cssClass: "linkBtn", visible: !1, events: { tap: function (r, w) { a._plumb.deleteConnection(r.component) } } }], ["Label", { label: "", id: "label", cssClass: "linkLabel", visible: !1 }], ["Label", { id: "label_source", location: 20, label: "", cssClass: "linkLabelSource", visible: !1 }],
                    ["Label", { id: "label_target", location: -20, label: "", cssClass: "linkLabelTarget", visible: !1 }], ["Arrow", { location: 1, id: "arrow_target", length: 10, width: 10, foldback: .8, show: !0 }], ["Arrow", { location: .5, id: "arrow_middle", length: 10, width: 10, foldback: .8, show: !1 }], ["Diamond", { location: .5, id: "animation", length: 10, width: 10, show: !1 }]], Container: "canvas"
                }); for (var v in a._connectionTypes) a._plumb.registerConnectionType(v, a._connectionTypes[v]); this._plumb.bind("connection", function (r, w) {
                    try {
                        var x = r.sourceId, z = r.targetId,
                        y = r.connection.data; y == null && (y = a._linkInfos[x + "-" + z], y == null && (y = {})); y.source_id = x; y.target_id = z; a._linkInfos[x + "-" + z] = y; a._paintConnection(r.connection, y); a._onCanvasChanged()
                    } catch (A) { }
                }); this._plumb.bind("connectionDetached", function (r) { a.delLinkInfo(r.sourceId, r.targetId); a._plumb.repaintEverything() }); this._plumb.bind("connectionMoved", function (r) { a.delLinkInfo(r.originalSourceId, r.originalTargetId); a._plumb.repaintEverything() }); this._plumb.bind("beforeDetach", function (r) {
                    return a.editable ?
                        !0 : !1
                }); this._plumb.bind("beforeDrop", function (r) { return a.editable && a._linkInfos[r.sourceId + "-" + r.targetId] == null ? !0 : !1 }); this._plumb.bind("click", function (r, w) { a.editable && (w.preventDefault(), a.event_link_click && a.event_link_dblclick ? (a._timer_link && clearTimeout(a._timer_link), a._timer_link = setTimeout(function () { var x = a.getLinkInfo(r.sourceId, r.targetId); a.event_link_click(x) }, 300)) : a.event_link_click && (w = a.getLinkInfo(r.sourceId, r.targetId), a.event_link_click(w))) }); this._plumb.bind("dblclick",
                    function (r, w) { w.preventDefault(); a.editable && a.event_link_dblclick && (a._timer_link && clearTimeout(a._timer_link), r = a.getLinkInfo(r.sourceId, r.targetId), a.event_link_dblclick(r)) })
    }, _showMetadata: function (a) {
        var b = this, d = this.metadata, c = {}, f; for (f in d) if (!(a && a.length > 0 && d[f].tag && d[f].tag.length > 0 && d[f].tag != a)) { var e = d[f].group || "\u901a\u7528"; c[e] == null && (c[e] = []); c[e].push(d[f]) } document.getElementById("actionMenu").innerHTML = ""; a = 0; for (var g in c) {
            a > 0 && document.getElementById("actionMenu").appendChild(andflow_util.parseHtml('<li class="actionMenuSpliter"  ></li>'));
            d = '<li class="actionMenuGroup"  ><a href="#" class="group-title"><span class="group-label">' + g + "</span></a></li>"; document.getElementById("actionMenu").appendChild(andflow_util.parseHtml(d)); d = c[g]; for (f in d) {
                e = d[f].name; var l = d[f].title, k = d[f].icon || "img/node.png", h = ""; k && k.length > 0 && (h = '<img src="' + (b.img_path || "") + k + '" draggable="false" />'); e = '<li id="' + e + '"  action_name="' + e + '" action_title="' + l + '" class="actionMenuItem"  action_icon="' + k + '" ><a class="item-title">' + h + '<span class="item-label">' +
                    l + "</span></a></li>"; document.getElementById("actionMenu").appendChild(andflow_util.parseHtml(e))
            } a++
        } document.querySelectorAll("#actionMenu .actionMenuItem").forEach(function (m, n) {
            andflow_util.addEventListener(m, b._event_name_mousedown, function (u) {
                andflow_util.isVisible("#codeContainer") || (u = this.getAttribute("action_name"), b._drag_name = u, andflow_util.addEventListener(document.querySelector("#" + b.containerId + " .andflow"), b._event_name_mousemove, function (q) {
                    if (b._drag_name != null) {
                        var p = document.querySelector("#" +
                            b.containerId + " .andflow"), t = document.getElementById("drag_helper"); if (!t) { t = b._createHelper(b._drag_name); if (t == null) return; p.appendChild(t) } var v = t.offsetWidth / 2 || 10, r = t.offsetHeight / 2 || 10, w = q.targetTouches ? q.targetTouches[0].pageX : q.pageX; q = q.targetTouches ? q.targetTouches[0].pageY : q.pageY; var x = w - andflow_util.getPageLeft(p) - v; p = q - andflow_util.getPageTop(p) - r; t.style.left = x + "px"; t.style.top = p + "px"; t.setAttribute("p_x", v); t.setAttribute("p_y", r); t.setAttribute("page_x", w); t.setAttribute("page_y",
                                q)
                    }
                }))
            })
        })
    }, _createHelper: function (a) {
        if (a != null) {
            var b = this.getMetadata(a); if (b != null) {
                var d = b.icon, c = b.title, f = '<div class="action-drag"></div>'; a = '<div class="action-drag-main" ><div class="action-header">' + c + '</div><div class="action-icon"><img src="' + (this.img_path || "") + d + '"  draggable="false"/></div></div>'; b.tp == "group" ? (f = '<div class="group-drag"></div>', a = '<div class="group-drag-main"><div class="group-header">' + c + '</div><div class="group-body"></div></div>') : b.tp == "list" ? (f = '<div class="list-drag"></div>',
                    a = '<div class="list-drag-main"><div class="list-header">' + c + '</div><div class="list-body"></div></div>') : b.tp == "tip" ? (f = '<div class="tip-drag"></div>', a = '<div class="tip-drag-main"><div class="tip-header"></div><div class="tip-body">' + c + "</div></div>") : (f = '<div class="action-drag"></div>', a = '<div class="action-drag-main" ><div class="action-header">' + c + '</div><div class="action-icon"><img src="' + (this.img_path || "") + d + '" draggable="false"/></div></div>'); if (d = b.render_helper || b.render || this.render_action_helper) b =
                        d(b), b != null && b.length > 0 && (a = b); f = andflow_util.parseHtml(f); a = andflow_util.parseHtml(a); f.appendChild(a); f.setAttribute("id", "drag_helper"); f.style.position = "absolute"; f.querySelectorAll("img").forEach(e => { e.setAttribute("draggable", "false") }); return f
            }
        }
    }, _createGroup: function (a) {
        var b = this, d = a.id, c = a.name; if (d != null && c != null) {
            var f = a.members || []; c = this.getMetadata(c) || {}; var e = document.getElementById(a.id); if (!e) {
                e = andflow_util.parseHtml('<div id="' + a.id + '" class="group group-container andflow_meta" > </div>');
                var g = '<div class="group-main group-master"><div class="group-header"></div><div class="group-body"></div></div>'; if (a.render) { var l = a.render(c, a, g); l && l.length > 0 && (g = l) } else c.render && (l = c.render(c, a, g)) && l.length > 0 && (g = l); g = andflow_util.parseHtml(g); g.appendChild(andflow_util.parseHtml('<div class="group-remove-btn">X</div>')); g.appendChild(andflow_util.parseHtml('<div class="group-resize"></div>')); l = '<div class="group-ep" title="\u62d6\u62c9\u8fde\u7ebf">\u2192</div>'; b.render_endpoint && (c = b.render_endpoint(c,
                    a, l)) && c.length > 0 && (l = c); c = andflow_util.parseHtml(l); andflow_util.addClass(c, "group-ep"); g.appendChild(c); e.appendChild(g); document.querySelector("#" + b.containerId + " #canvas").appendChild(e)
            } b.setGroupInfo(a); b._plumb.addGroup({
                el: e, id: a.id, orphan: !0, droppable: !0, dropOverride: !0, revert: !0, endpoint: ["Dot", { radius: 3 }], dragOptions: {
                    start: function (h) { b._showScope(e) }, drag: function (h) {
                        b._showScope(e); h.pos[0] < 0 && (h.pos[0] = 0, andflow_util.setStyle(h.el, "left", "0px")); h.pos[1] < 0 && (h.pos[1] = 0, andflow_util.setStyle(h.el,
                            "top", "0px"))
                    }, stop: function (h) { b._hideScope(); if (b.drag_step > 1) { var m = Math.round(h.pos[1] / b.drag_step) * b.drag_step; andflow_util.setStyle(h.el, "left", Math.round(h.pos[0] / b.drag_step) * b.drag_step + "px"); andflow_util.setStyle(h.el, "top", m + "px") } }
                }
            }); b._plumb.makeSource(e, { filter: ".group-ep", anchor: "Continuous", extract: { action: "the-action" } }); b._plumb.makeTarget(e, { dropOptions: { hoverClass: "dragHover" }, anchor: "Continuous", allowLoopback: !0 }); if (f && f.length > 0) {
                a = []; for (var k in f) a.push(document.getElementById(f[k]));
                b._plumb.addToGroup(d, a)
            } andflow_util.addEventListener(e, b._event_name_mouseover, function (h) { b._showScope(e) }); andflow_util.addEventListener(e, b._event_name_mouseout, function (h) { b._hideScope() }); andflow_util.addEventListener(e, b._event_name_mousedown, function (h) { b._selecting && e.parentElement.classList.contains("canvas") && b._postSelectObject(e) }); andflow_util.addEventListener(e, b._event_name_mouseup, function (h) {
                b.editable && b.isMobile && (document.querySelectorAll(".canvas .group.focus").forEach(function (m,
                    n) { andflow_util.removeClass(m, "focus") }), andflow_util.addClass(e, "focus")); b._onCanvasChanged(); h.preventDefault()
            }); andflow_util.addEventListener(e.querySelector(".group-remove-btn"), b._event_name_click, function () { andflow_util.confirm("\u786e\u5b9a\u5220\u9664\u5206\u7ec4?", function () { b.removeGroup(d) }) }); andflow_util.addEventListener(e.querySelector(".group-header"), b._event_name_dblclick, function (h) {
                if (b.editable && (h.preventDefault(), !e.querySelector(".content_editor"))) {
                    var m = andflow_util.parseHtml('<input class="content_editor" style="resize: none;border:none;outline: none;"  />');
                    andflow_util.setStyle(m, "position", "absolute"); andflow_util.setStyle(m, "z-index", "10"); andflow_util.setStyle(m, "left", "0px"); andflow_util.setStyle(m, "top", "0px"); andflow_util.setStyle(m, "width", "100%"); andflow_util.setStyle(m, "height", "100%"); andflow_util.setStyle(m, "box-sizing", "border-box"); andflow_util.setValue(m, e.querySelector(".group-header").innerHTML); e.querySelector(".group-header").appendChild(m); m.focus(); andflow_util.addEventListener(m, "blur", function (n) {
                        n = n.target.value; m.parentElement.innerHTML =
                            n; b._groupInfos[d].title = n; andflow_util.removeElement(m)
                    }); andflow_util.addEventListener(m, "keydown", function (n) { n.code == "Enter" && (n = andflow_util.getValue(m), m.parentElement.innerHtml = n, b._groupInfos[d].title = n, andflow_util.removeElement(m)) })
                }
            }); andflow_util.addEventListener(e.querySelector(".group-body"), b._event_name_dblclick, function (h) {
                if (b.editable && (h.preventDefault(), !e.querySelector(".content_editor"))) {
                    var m = andflow_util.parseHtml('<textarea class="content_editor" style="resize: none;border:none;outline: none;"></textarea>');
                    andflow_util.setStyle(m, "position", "absolute"); andflow_util.setStyle(m, "z-index", "10"); andflow_util.setStyle(m, "left", "0px"); andflow_util.setStyle(m, "top", "0px"); andflow_util.setStyle(m, "width", "100%"); andflow_util.setStyle(m, "height", "100%"); andflow_util.setStyle(m, "box-sizing", "border-box"); andflow_util.setValue(m, b._groupInfos[d].des || ""); e.querySelector(".group-body").appendChild(m); m.focus(); andflow_util.addEventListener(m, "blur", function (n) {
                        n = n.target.value; b._groupInfos[d].des = n; n = n.replaceAll("\n",
                            "<br/>"); m.parentElement.innerHTML = n; andflow_util.removeElement(m)
                    })
                }
            }); andflow_util.addEventListener(e.querySelector(".group-resize"), b._event_name_mousedown, function (h) {
                b._showScope(e); var m = document.querySelector("#" + b.containerId); m.style.cursor = "nwse-resize"; var n = e.querySelector(".group-master"), u = h.targetTouches ? h.targetTouches[0].pageX : h.pageX, q = h.targetTouches ? h.targetTouches[0].pageY : h.pageY, p = n.offsetWidth, t = n.offsetHeight; andflow_util.addEventListener(m, b._event_name_mousemove, function (v) {
                    b._showScope(e);
                    var r = p + ((v.targetTouches ? v.targetTouches[0].pageX : v.pageX) - u), w = t + ((v.targetTouches ? v.targetTouches[0].pageY : v.pageY) - q); andflow_util.setStyle(n, "width", r + "px"); andflow_util.setStyle(n, "height", w + "px"); andflow_util.setAttr(e, "width", r); andflow_util.setAttr(e, "height", w); b._plumb.repaintEverything(); b._onCanvasChanged(); v.preventDefault()
                }); h.preventDefault()
            }); b._onCanvasChanged()
        }
    }, _createList: function (a) {
        var b = this, d = a.id; if (d != null) {
            this.getMetadata(name); var c = document.querySelector("#" + b.containerId +
                " #" + a.id); c || (c = andflow_util.parseHtml('<div id="' + a.id + '" class="list list-container andflow_meta"><div class="list-remove-btn">X</div><div class="list-resize"></div><div class="list-main"><div class="list-header"></div><div class="list-body"></div></div></div>'), document.querySelector("#" + b.containerId + " #canvas").appendChild(c)); b.setListInfo(a); andflow_util.addEventListener(c, b._event_name_mouseover, function (e) { b._showScope(c) }); andflow_util.addEventListener(c, b._event_name_mouseout, function (e) { b._hideScope() });
            andflow_util.addEventListener(c, b._event_name_mousedown, function () { b._selecting && c.parentElement.classList.contains("canvas") && b._postSelectObject(c) }); andflow_util.addEventListener(c, b._event_name_mouseup, function () { b.editable && b.isMobile && (document.querySelectorAll(".focus").forEach(function (e) { andflow_util.removeClass(e, "focus") }), andflow_util.addClass(c, "focus")); b._onCanvasChanged() }); andflow_util.addEventListener(c.querySelector(".list-remove-btn"), b._event_name_click, function () {
                andflow_util.confirm("\u786e\u5b9a\u5220\u9664?",
                    function () { b.removeList(d) })
            }); var f = c.querySelector(".list-main"); andflow_util.addEventListener(c.querySelector(".list-resize"), b._event_name_mousedown, function (e) {
                b._showScope(c); var g = document.getElementById(b.containerId); g.style.cursor = "nwse-resize"; var l = e.targetTouches ? e.targetTouches[0].pageX : e.pageX, k = e.targetTouches ? e.targetTouches[0].pageY : e.pageY, h = f.offsetWidth, m = f.offsetHeight; andflow_util.addEventListener(g, b._event_name_mousemove, function (n) {
                    b._showScope(c); var u = h + ((n.targetTouches ?
                        n.targetTouches[0].pageX : n.pageX) - l), q = m + ((n.targetTouches ? n.targetTouches[0].pageY : n.pageY) - k); andflow_util.setStyle(f, "width", u + "px"); andflow_util.setStyle(f, "height", q + "px"); andflow_util.setAttr(c, "width", u); andflow_util.setAttr(c, "height", q); b._plumb.repaintEverything(); b._onCanvasChanged(); n.preventDefault()
                }); e.preventDefault()
            }); andflow_util.addEventListener(c.querySelector(".list-header"), b._event_name_dblclick, function (e) {
                if (b.editable && (e.preventDefault(), !c.querySelector(".content_editor"))) {
                    var g =
                        andflow_util.parseHtml('<input class="content_editor" style="resize: none;border:none;outline: none;" />'); andflow_util.setStyle(g, "position", "absolute"); andflow_util.setStyle(g, "z-index", "10"); andflow_util.setStyle(g, "left", "0px"); andflow_util.setStyle(g, "top", "0px"); andflow_util.setStyle(g, "width", "100%"); andflow_util.setStyle(g, "height", "100%"); andflow_util.setStyle(g, "box-sizing", "border-box"); andflow_util.setValue(g, c.querySelector(".list-header").innerHTML); c.querySelector(".list-header").appendChild(g);
                    g.focus(); andflow_util.addEventListener(g, "blur", function (l) { l = l.target.value; g.parentElement.innerHTML = l; b._listInfos[d].title = l; andflow_util.removeElement(g); b._onCanvasChanged() }); andflow_util.addEventListener(g, "keydown", function (l) { l.code == "Enter" && (l = andflow_util.getValue(g), g.parentElement.innerHTML = l, b._listInfos[d].title = l, andflow_util.removeElement(g), b._onCanvasChanged()) })
                }
            }); andflow_util.addEventListener(c.querySelector(".list-body"), b._event_name_dblclick, function (e) {
                if (b.editable &&
                    (e.preventDefault(), !c.querySelector(".content_editor"))) {
                        e = andflow_util.parseHtml('<textarea class="content_editor" style="resize: none;border:none;outline: none;"></textarea>'); andflow_util.addClass(e, "content_editor"); andflow_util.setStyle(e, "position", "absolute"); andflow_util.setStyle(e, "z-index", "10"); andflow_util.setStyle(e, "left", "0px"); andflow_util.setStyle(e, "top", "0px"); andflow_util.setStyle(e, "width", "100%"); andflow_util.setStyle(e, "height", "100%"); andflow_util.setStyle(e, "box-sizing",
                            "border-box"); var g = b._listInfos[d].items, l = ""; if (g && g.length > 0) for (var k in g) l += g[k].title + "\n"; andflow_util.setValue(e, l); c.querySelector(".list-body").appendChild(e); e.focus(); andflow_util.addEventListener(e, "blur", function (h) { h = h.target.value.split("\n"); var m = [], n; for (n in h) { var u = "list_item_" + d + "_" + n, q = h[n]; q != null && q.trim() != "" && m.push({ id: u, title: h[n] }) } b.setListItems(d, m); b._onCanvasChanged(); andflow_util.removeElement(this) })
                }
            }); b._plumb.draggable(c, {
                start: function (e) { b._showScope(c) },
                drag: function (e) { b._showScope(c); e.pos[0] < 0 && (e.pos[0] = 0, andflow_util.setStyle(e.el, "left", "0px")); e.pos[1] < 0 && (e.pos[1] = 0, andflow_util.setStyle(e.el, "top", "0px")) }, stop: function (e) { b._hideScope(); if (b.drag_step > 1) { var g = Math.round(e.pos[1] / b.drag_step) * b.drag_step; andflow_util.setStyle(e.el, "left", Math.round(e.pos[0] / b.drag_step) * b.drag_step + "px"); andflow_util.setStyle(e.el, "top", g + "px") } }
            }); b._plumb.addList(c, { endpoint: ["Rectangle", { width: 20, height: 20 }] }); b._onCanvasChanged()
        }
    }, _setListItems: function (a,
        b) {
            var d = a; typeof a === "string" && (d = document.getElementById(a)); if (d) {
                if (d.querySelector(".list-item")) { var c = []; d.querySelectorAll(".list-item").forEach(function (k, h) { h = k.id; let m = !1; for (var n in b) h == b[n].id && (m = !0); m || c.push(k) }); for (var f in c) a = c[f].id, this.removeLinkBySource(a), this.removeLinkByTarget(a), this._plumb.remove(c[f]), andflow_util.removeElement(c[f]) } for (f in b) if (a = b[f], a.id != null && a.title != null && a.title != "") {
                    var e = a.id, g = document.getElementById(e); g || (g = andflow_util.parseHtml('<div id="' +
                        e + '" class="list-item"><div class="list-item-title"></div></div>'), d.querySelector(".list-body").appendChild(g), this._plumb.makeSource(g, { allowLoopback: !1, anchor: ["Left", "Right"] }), this._plumb.makeTarget(g, { allowLoopback: !1, anchor: ["Left", "Right"] })); g.querySelector(".list-item-title").innerHTML = a.title || ""; a.item_color && andflow_util.setStyle(g, "background-color", a.item_color); a.item_text_color && andflow_util.setStyle(g.querySelector(".list-item-title"), "color", a.item_text_color); if (a.style) for (var l in a.style) andflow_util.setStyle(g,
                            l, a.style[l])
                }
            }
    }, _deleteListItem: function (a, b) { for (var d in this._listInfos[a].items) this._listInfos[a].items[d].id == b && (this._listInfos[a].items[d] = null) }, _getBase64Image: function (a) { try { var b = document.createElement("canvas"); b.width = a.width; b.height = a.height; b.getContext("2d").drawImage(a, 0, 0, a.width, a.height); return b.toDataURL("image/png") } catch (d) { return null } }, _createAction: function (a) {
        const b = this, d = a.id; if (d != null) {
            var c = a.name; if (c != null) {
                var f = this.getMetadata(c) || {}, e = document.getElementById(a.id);
                if (!e) {
                    e = andflow_util.parseHtml('<div id="' + d + '"  draggable="true" ondragend="" class="action-container andflow_meta" ><div  class="action" ></div></div>'); var g = '<div class="action-main action-master" ><div class="action-icon" ><img src=""  ></div><div class="action-header" ></div><div class="action-body"  ><div class="action-content"  ></div><div class="body-resize"></div></div></div>'; var l = a.render || f.render || b.render_action; l && (l = l(f, a, g)) && l.length > 0 && (g = l); g = andflow_util.parseHtml(g); andflow_util.addClass(g,
                        "action-master"); e.querySelector(".action").appendChild(g); g = '<div class="ep" title="\u62d6\u62c9\u8fde\u7ebf">\u2192</div>'; b.render_endpoint && (l = b.render_endpoint(f, a, g)) && l.length > 0 && (g = l); g = andflow_util.parseHtml(g); andflow_util.addClass(g, "ep"); e.querySelector(".action").appendChild(g); g = '<div class="action-resize"></div>'; b.render_btn_resize && (l = b.render_btn_resize(f, a, g)) && l.length > 0 && (g = l); g = andflow_util.parseHtml(g); andflow_util.addClass(g, "action-resize"); e.querySelector(".action").appendChild(g);
                    g = '<a href="javascript:void(0)" class="action-remove-btn"  >X</a>'; b.render_btn_remove && (l = b.render_btn_remove(f, a, g)) && l.length > 0 && (g = l); g = andflow_util.parseHtml(g); andflow_util.addClass(g, "action-remove-btn"); e.querySelector(".action").appendChild(g); document.querySelector("#" + b.containerId + " #canvas").appendChild(e)
                } e.id = d; this.setActionInfo(a); andflow_util.addEventListener(e.querySelector(".action-icon img"), "load", function () {
                    if (andflow_util.getAttr(this, "src").indexOf("data:image/") < 0) {
                        var k =
                            b._getBase64Image(this); k != null && (this.src = k)
                    }
                }); andflow_util.addEventListener(e, b._event_name_mouseover, function (k) { b._showScope(e) }); andflow_util.addEventListener(e, b._event_name_mouseout, function (k) { b._hideScope() }); andflow_util.addEventListener(e, b._event_name_mousedown, function (k) { b._selecting && e.parentElement.classList.contains("canvas") && b._postSelectObject(e); andflow_util.setAttr(e, "mousedown", "true"); andflow_util.setAttr(e, "mousedown_time", (new Date).getTime()) }); andflow_util.addEventListener(e,
                    b._event_name_mouseup, function (k) {
                        b._onCanvasChanged(); andflow_util.setAttr(e, "mousedown", "false"); b.editable && b.isMobile && (document.querySelectorAll(".canvas .focus").forEach(function (m, n) { andflow_util.removeClass(m, "focus") }), andflow_util.addClass(e.querySelector(".action"), "focus")); if (b.editable) {
                            var h = b.getAction(d); b.event_action_click && (b.event_action_dblclick ? (b._timer_action && clearTimeout(b._timer_action), b._timer_action = setTimeout(function () { b.event_action_click(f, h) }, 300)) : b.event_action_click(f,
                                h))
                        } k.preventDefault()
                    }); andflow_util.addEventListener(e, b._event_name_dblclick, function (k) { if (b.editable && b.event_action_dblclick) { b._timer_action && clearTimeout(b._timer_action); var h = b.getAction(d); b.event_action_dblclick(f, h) } k.preventDefault() }); andflow_util.addEventListener(e.querySelector(".action-remove-btn"), b._event_name_click, function () { andflow_util.confirm("\u786e\u5b9a\u5220\u9664\u8be5\u8282\u70b9?", function () { b.removeAction(d) }) }); andflow_util.addEventListener(e.querySelector(".action-resize"),
                        b._event_name_mousedown, function (k) {
                            b._showScope(e); var h = document.getElementById(b.containerId); h.style.cursor = "nwse-resize"; var m = k.targetTouches ? k.targetTouches[0].pageX : k.pageX, n = k.targetTouches ? k.targetTouches[0].pageY : k.pageY, u = e.querySelector(".action-master").offsetWidth, q = e.querySelector(".action-master").offsetHeight; andflow_util.addEventListener(h, b._event_name_mousemove, function (p) {
                                b._showScope(e); var t = u + ((p.targetTouches ? p.targetTouches[0].pageX : p.pageX) - m); p = q + ((p.targetTouches ? p.targetTouches[0].pageY :
                                    p.pageY) - n); var v = andflow_util.getStyle(e.querySelector(".action-master"), "min-width") || "0", r = andflow_util.getStyle(e.querySelector(".action-master"), "min-height") || "0"; v = v.replace("px", "") * 1; r = r.replace("px", "") * 1; if (v == null || t > v) andflow_util.setStyle(e.querySelector(".action-master"), "width", t + "px"), andflow_util.setStyle(e.querySelector(".action"), "width", t + "px"); if (r == null || p > r) andflow_util.setStyle(e.querySelector(".action-master"), "height", p + "px"), andflow_util.setStyle(e.querySelector(".action"),
                                        "height", p + "px"); t = b._actionCharts[d]; t != null && (p = document.getElementById("chart_" + d), r = p.parentElement.offsetHeight, andflow_util.setStyle(p, "width", p.parentElement.offsetWidth + "px"), andflow_util.setStyle(p, "height", r + "px"), t.resize()); b._plumb.repaintEverything(); b._onCanvasChanged(); k.preventDefault()
                            }); k.preventDefault()
                        }); andflow_util.addEventListener(e.querySelector(".body-resize"), b._event_name_mousedown, function (k) {
                            b._showScope(e); var h = document.getElementById(b.containerId); h.style.cursor =
                                "nwse-resize"; var m = k.targetTouches ? k.targetTouches[0].pageX : k.pageX, n = k.targetTouches ? k.targetTouches[0].pageY : k.pageY, u = e.querySelector(".action-body").offsetWidth, q = e.querySelector(".action-body").offsetHeight; andflow_util.addEventListener(h, b._event_name_mousemove, function (p) {
                                    b._showScope(e); var t = u + ((p.targetTouches ? p.targetTouches[0].pageX : p.pageX) - m), v = q + ((p.targetTouches ? p.targetTouches[0].pageY : p.pageY) - n); andflow_util.setStyle(e.querySelector(".action-body"), "width", t + "px"); andflow_util.setStyle(e.querySelector(".action-body"),
                                        "height", v + "px"); andflow_util.setAttr(e, "body_width", t); andflow_util.setAttr(e, "body_height", v); t = b._actionCharts[d]; if (t != null) { v = document.getElementById("chart_" + d); var r = v.parentElement.offsetHeight; andflow_util.setStyle(v, "width", v.parentElement.offsetWidth + "px"); andflow_util.setStyle(v, "height", r + "px"); t.resize() } b._plumb.repaintEverything(); b._onCanvasChanged(); p.preventDefault()
                                }); k.preventDefault()
                        }); this._showActionNode(e, c); b._onCanvasChanged()
            }
        }
    }, _showActionNode: function (a, b) {
        var d = this;
        d._plumb.draggable(a, { start: function (c) { d._showScope(a) }, drag: function (c) { d._showScope(a); c.pos[0] < 0 && (c.pos[0] = 0, andflow_util.setStyle(c.el, "left", "0px")); c.pos[1] < 0 && (c.pos[1] = 0, andflow_util.setStyle(c.el, "top", "0px")) }, stop: function (c) { d._hideScope(); if (d.drag_step > 1) { var f = Math.round(c.pos[1] / d.drag_step) * d.drag_step; andflow_util.setStyle(c.el, "left", Math.round(c.pos[0] / d.drag_step) * d.drag_step + "px"); andflow_util.setStyle(c.el, "top", f + "px") } } }); b != null && b == "end" || d._plumb.makeSource(a, {
            filter: ".ep",
            anchor: "Continuous", extract: { action: "the-action" }, maxConnections: 20, onMaxConnections: function (c, f) { showWarning("\u5df2\u7ecf\u8fbe\u5230\u8fde\u63a5\u6700\u5927\u6570 (" + c.maxConnections + ") ") }
        }); b != null && b == "begin" || d._plumb.makeTarget(a, { dropOptions: { hoverClass: "dragHover" }, anchor: "Continuous", allowLoopback: !0 })
    }, _createTip: function (a) {
        var b = this; const d = a.id; if (d != null) {
            var c = this.getMetadata(a.name) || {}, f = document.querySelector("#" + this.containerId + " #" + a.id); if (!f) {
                f = andflow_util.parseHtml('<div id="' +
                    a.id + '" class="tip tip-container andflow_meta"><div class="tip-remove-btn">X</div><div class="tip-resize"></div></div>'); var e = '<div class="tip-main"><div class="tip-header"></div><div class="tip-body"></div></div>'; if (a.render) { var g = a.render(c, a, e); g && g.length > 0 && (e = g) } else c.render ? (g = c.render(c, a, e)) && g.length > 0 && (e = g) : b.render_tip && (g = b.render_tip(c, a, e)) && g.length > 0 && (e = g); e = andflow_util.parseHtml(e); andflow_util.addClass(e, "tip-master"); f.appendChild(e); e = '<div class="tip-ep" title="\u62d6\u62c9\u8fde\u7ebf">\u2192</div>';
                b.render_endpoint && (c = b.render_endpoint(c, a, e)) && c.length > 0 && (e = c); c = andflow_util.parseHtml(e); andflow_util.addClass(c, "tip-ep"); f.appendChild(c); document.getElementById("canvas").appendChild(f)
            } b.setTipInfo(a); b._plumb.getContainer().appendChild(f); b._plumb.draggable(f, {
                start: function (l) { b._showScope(f) }, drag: function (l) { b._showScope(f); l.pos[0] < 0 && (l.pos[0] = 0, andflow_util.setStyle(l.el, "left", "0px")); l.pos[1] < 0 && (l.pos[1] = 0, andflow_util.setStyle(l.el, "top", "0px")) }, stop: function (l) {
                    b._hideScope();
                    if (b.drag_step > 1) { var k = Math.round(l.pos[1] / b.drag_step) * b.drag_step; andflow_util.setStyle(l.el, "left", Math.round(l.pos[0] / b.drag_step) * b.drag_step + "px"); andflow_util.setStyle(l.el, "top", k + "px") }
                }
            }); b._plumb.makeSource(f, { filter: ".tip-ep", anchor: "Continuous" }); b._plumb.makeTarget(f, { dropOptions: { hoverClass: "dragHover" }, anchor: "Continuous", allowLoopback: !0 }); andflow_util.addEventListener(f, b._event_name_mouseover, function (l) { b._showScope(f) }); andflow_util.addEventListener(f, b._event_name_mouseout,
                function (l) { b._hideScope() }); andflow_util.addEventListener(f, b._event_name_mousedown, function () { b._selecting && f.parentElement.classList.contains("canvas") && b._postSelectObject(f) }); andflow_util.addEventListener(f, b._event_name_mouseup, function () { b.editable && b.isMobile && (document.querySelectorAll(".focus").forEach(function (l) { andflow_util.removeClass(l, "focus") }), andflow_util.addClass(f, "focus")); b._onCanvasChanged() }); andflow_util.addEventListener(f.querySelector(".tip-remove-btn"), b._event_name_click,
                    function () { andflow_util.confirm("\u786e\u5b9a\u5220\u9664?", function () { b.removeTip(d) }) }); andflow_util.addEventListener(f.querySelector(".tip-header"), b._event_name_dblclick, function (l) {
                        if (b.editable && !f.querySelector(".content_editor")) {
                            var k = andflow_util.parseHtml('<input class="content_editor" style="resize:none;border: none;outline: none;" />'); andflow_util.setStyle(k, "position", "absolute"); andflow_util.setStyle(k, "z-index", "10"); andflow_util.setStyle(k, "left", "0px"); andflow_util.setStyle(k, "top",
                                "0px"); andflow_util.setStyle(k, "width", "100%"); andflow_util.setStyle(k, "height", "100%"); andflow_util.setStyle(k, "box-sizing", "border-box"); andflow_util.setValue(k, f.querySelector(".tip-header").innerHTML); f.querySelector(".tip-header").appendChild(k); k.focus(); andflow_util.addEventListener(k, "blur", function (h) { h = h.target.value; k.parentElement.innerHTML = h; b._tipInfos[d].title = h; b._onCanvasChanged(); andflow_util.removeElement(k) }); andflow_util.addEventListener(k, "keydown", function (h) {
                                    h.code == "Enter" &&
                                    (h = h.target.value, k.parentElement.innerHtml = h, b._tipInfos[d].title = h, b._onCanvasChanged(), andflow_util.removeElement(k))
                                })
                        }
                    }); andflow_util.addEventListener(f.querySelector(".tip-body"), b._event_name_dblclick, function (l) {
                        if (b.editable && !f.querySelector(".content_editor")) {
                            var k = andflow_util.parseHtml('<textarea class="content_editor"  style="resize:none;border: none;outline: none;"></textarea>'); andflow_util.setStyle(k, "position", "absolute"); andflow_util.setStyle(k, "z-index", "10"); andflow_util.setStyle(k,
                                "left", "0px"); andflow_util.setStyle(k, "top", "0px"); andflow_util.setStyle(k, "width", "100%"); andflow_util.setStyle(k, "height", "100%"); andflow_util.setStyle(k, "box-sizing", "border-box"); andflow_util.setValue(k, b._tipInfos[d].content); f.querySelector(".tip-body").appendChild(k); k.focus(); andflow_util.addEventListener(k, "blur", function (h) { h = h.target.value; b._tipInfos[d].content = h; h = h.replaceAll("\n", "<br/>"); k.parentElement.innerHTML = h; b._onCanvasChanged(); andflow_util.removeElement(k) })
                        }
                    }); andflow_util.addEventListener(f.querySelector(".tip-resize"),
                        b._event_name_mousedown, function (l) {
                            b._showScope(f); var k = document.getElementById(b.containerId); k.style.cursor = "nwse-resize"; var h = f.querySelector(".tip-master"), m = l.targetTouches ? l.targetTouches[0].pageX : l.pageX, n = l.targetTouches ? l.targetTouches[0].pageY : l.pageY, u = h.offsetWidth, q = h.offsetHeight; andflow_util.addEventListener(k, b._event_name_mousemove, function (p) {
                                b._showScope(f); var t = u + ((p.targetTouches ? p.targetTouches[0].pageX : p.pageX) - m), v = q + ((p.targetTouches ? p.targetTouches[0].pageY : p.pageY) -
                                    n); andflow_util.setStyle(h, "width", t + "px"); andflow_util.setStyle(h, "height", v + "px"); andflow_util.setAttr(f, "width", t); andflow_util.setAttr(f, "height", v); b._plumb.repaintEverything(); b._onCanvasChanged(); p.preventDefault()
                            }); l.preventDefault()
                        })
        }
    }, _showScope: function (a) {
        if (!(a.parentElement.className.indexOf("canvas") < 0)) {
            var b = a.offsetTop, d = a.offsetLeft, c = a.offsetWidth; a = a.offsetHeight; var f = this._getContainer().querySelector(".canvasBox"); b -= f.scrollTop; d -= f.scrollLeft; f = this._getContainer().querySelector(".ruler_h>.scope");
            var e = this._getContainer().querySelector(".ruler_v>.scope"); f.style.display = "block"; f.style.width = c + "px"; f.style.left = d + "px"; e.style.display = "block"; e.style.height = a + "px"; e.style.top = b + "px"
        }
    }, _hideScope: function () { var a = this._getContainer().querySelector(".ruler_h>.scope"), b = this._getContainer().querySelector(".ruler_v>.scope"); a.style.display = "none"; b.style.display = "none" }, _hideRulers: function () {
        var a = document.getElementById("canvasContainer"); andflow_util.setStyle(a, "padding-left", "0px"); andflow_util.setStyle(a,
            "padding-top", "0px"); a.querySelector(".ruler_h").style.display = "none"; a.querySelector(".ruler_v").style.display = "none"; this.show_rulers = !1; andflow_util.removeClass("#" + this.containerId + " .ruler_btn", "close")
    }, _showRulers: function () {
        var a = document.getElementById("canvasContainer"); andflow_util.setStyle(a, "padding-left", "20px"); andflow_util.setStyle(a, "padding-top", "20px"); a.querySelector(".ruler_h").style.display = "block"; a.querySelector(".ruler_v").style.display = "block"; this.show_rulers = !0; andflow_util.addClass("#" +
            this.containerId + " .ruler_btn", "close"); this._drawRulers()
    }, _drawRulers: function () {
        var a = document.querySelector(".ruler_h").querySelector("canvas"); a.height = 40; a.style.width = "4000px"; a.width = 8E3; var b = a.getContext("2d"); b.lineWidth = .5; b.strokeStyle = "black"; b.fillStyle = "black"; b.font = "12px Arial"; for (var d = 20; d <= a.width; d += 20) { var c = 15; d % 40 == 0 && (c = 35); b.beginPath(); b.moveTo(d, 40); b.lineTo(d, 40 - c); b.stroke(); if (d % 40 == 0) { var f = d / 40; b.fillText(f, d + 2, 12) } } a = document.querySelector(".ruler_v").querySelector("canvas");
        a.width = 40; a.style.height = "4000px"; a.height = 8E3; b = a.getContext("2d"); b.lineWidth = .5; b.strokeStyle = "black"; b.fillStyle = "black"; b.font = "12px Arial"; for (d = 20; d <= a.height; d += 20)c = 15, d % 40 == 0 && (c = 35), b.beginPath(), b.moveTo(40, d), b.lineTo(40 - c, d), b.stroke(), d % 40 == 0 && (f = d / 40, b.fillText(f, 40 - c, d - 2)); this._posRulers()
    }, _posRulers: function () {
        var a = document.getElementById(this.containerId).querySelector(".canvasBox"), b = a.scrollLeft; a = a.scrollTop; var d = document.querySelector(".ruler_h").querySelector("canvas");
        andflow_util.setStyle(d, "left", -b + "px"); b = document.querySelector(".ruler_v").querySelector("canvas"); andflow_util.setStyle(b, "top", -a + "px")
    }, _showThumbnail: function () { andflow_util.setAttr("#" + this.containerId + " .thumbnail_btn", "state", "open"); andflow_util.show("#" + this.containerId + " .flow_thumbnail"); andflow_util.removeClass("#" + this.containerId + " .thumbnail_btn", "open"); this._drawThumbnail() }, _hideThumbnail: function () {
        andflow_util.setAttr("#" + this.containerId + " .thumbnail_btn", "state", "close"); andflow_util.hide("#" +
            this.containerId + " .flow_thumbnail"); andflow_util.addClass("#" + this.containerId + " .thumbnail_btn", "open")
    }, _drawThumbnail: function () {
        if (andflow_util.isVisible("#" + this.containerId + " .flow_thumbnail")) {
            document.getElementById(this.containerId).querySelector(".canvasContainer"); var a = document.getElementById(this.containerId).querySelector(".canvas"), b = a.parentElement, d = document.getElementById(this.containerId).querySelector(".flow_thumbnail"), c = document.getElementById(this.containerId).querySelector(".flow_thumbnail_mask"),
                f = b.offsetWidth, e = b.offsetHeight, g = 150 / a.offsetWidth; a = g * a.offsetHeight; andflow_util.setStyle(d, "width", "150px"); andflow_util.setStyle(d, "height", a + "px"); d = e * g + "px"; e = b.scrollLeft * g + "px"; b = b.scrollTop * g + "px"; andflow_util.setStyle(c, "width", f * g + "px"); andflow_util.setStyle(c, "height", d); andflow_util.setStyle(c, "left", e); andflow_util.setStyle(c, "top", b); c = document.getElementById("canvas"); f = c.scrollWidth; g = c.scrollHeight; b = document.createElement("canvas"); b.width = f; b.height = g; document.body.append(b);
            try {
                if (b.getContext) {
                    var l = b.getContext("2d"); l.fillStyle = "#CCCCCC"; c.querySelectorAll(".action-container").forEach(function (h, m) { m = andflow_util.getLeftInCanvas(h); var n = andflow_util.getTopInCanvas(h); l.fillRect(m, n, h.offsetWidth, h.offsetHeight) }); l.fillStyle = "#CCCCCC"; c.querySelectorAll(".tip-container").forEach(function (h, m) { m = andflow_util.getLeftInCanvas(h); var n = andflow_util.getTopInCanvas(h); l.fillRect(m, n, h.offsetWidth, h.offsetHeight) }); l.fillStyle = "#CCCCCC"; c.querySelectorAll(".list-container").forEach(function (h,
                        m) { m = andflow_util.getLeftInCanvas(h); var n = andflow_util.getTopInCanvas(h); l.fillRect(m, n, h.offsetWidth, h.offsetHeight) }); l.lineWidth = "3"; l.strokeStyle = "#CCCCCC"; l.beginPath(); c.querySelectorAll(".group-container").forEach(function (h, m) { m = andflow_util.getLeftInCanvas(h); var n = andflow_util.getTopInCanvas(h); l.rect(m, n, h.offsetWidth, h.offsetHeight) }); l.stroke()
                } var k = b.toDataURL("image/png", .3); andflow_util.setStyle(document.getElementById(this.containerId).querySelector(".flow_thumbnail"), "background-image",
                    "url(" + k + ")")
            } finally { andflow_util.removeElement(b) }
        }
    }, _showCode: function () { var a = this.getFlow(); a = JSON.stringify(a, null, "\t"); andflow_util.setValue("#codeContainer textarea", a); andflow_util.show("#codeContainer"); andflow_util.addClass("#" + this.containerId + " .code_btn", "design") }, _showDesigner: function () {
        if (this.editable) { var a = andflow_util.getValue("#codeContainer textarea") || "{}"; a = JSON.parse(a); this.showFlow(a) } andflow_util.hide("#codeContainer"); andflow_util.removeClass("#" + this.containerId + " .code_btn",
            "design")
    }, _openSelectState: function () { var a = this._getContainer().querySelector(".canvas"); andflow_util.addClass(a, "canvas_select"); andflow_util.removeClass(a, "canvas_move"); this._selecting = !0 }, _closeSelectState: function () { var a = this._getContainer().querySelector(".canvas"); andflow_util.removeClass(a, "canvas_select"); andflow_util.addClass(a, "canvas_move"); this._selecting = !1 }, _drawSelectBox: function () {
        if (this._selecting_objs.length > 0) {
            var a = 99999999999, b = 99999999999, d = 0, c = 0; this._selecting_objs.forEach((e,
                g) => { g = e.offsetLeft; var l = e.offsetTop, k = e.offsetWidth; e = e.offsetHeight; g < a && (a = g); l < b && (b = l); d < g + k && (d = g + k); c < l + e && (c = l + e) }); a -= 4; b -= 4; d += 4; c += 4; var f = this._getContainer().querySelector(".multi_select_box"); andflow_util.setStyle(f, "display", "block"); andflow_util.setStyle(f, "left", a + "px"); andflow_util.setStyle(f, "top", b + "px"); andflow_util.setStyle(f, "width", d - a + "px"); andflow_util.setStyle(f, "height", c - b + "px")
        } else f = this._getContainer().querySelector(".multi_select_box"), andflow_util.setStyle(f, "display",
            "none")
    }, _postSelectObject: function (a) { this._selecting_objs.some(b => b === a) ? this._selecting_objs = this._selecting_objs.filter(b => b !== a) : this._selecting_objs.push(a); this._drawSelectBox() }, _clearSelectObject: function () { this._selecting_objs = []; var a = this._getContainer().querySelector(".multi_select_box"); andflow_util.setStyle(a, "display", "none") }, _resizeCanvas: function () {
        var a = 0, b = 0, d = document.getElementById(this.containerId).querySelector(".canvas"); d.querySelectorAll("div").forEach(function (c, f) {
            f =
            c.offsetLeft; let e = c.offsetWidth, g = c.offsetTop; c = c.offsetHeight; f + e > a && (a = f + e); g + c > b && (b = g + c)
        }); andflow_util.setStyle(d, "width", a + "px"); andflow_util.setStyle(d, "height", b + "px")
    }, _onCanvasChanged: function () { var a = this; setTimeout(function () { a._resizeCanvas(); a.event_canvas_changed && a.event_canvas_changed(); a._drawThumbnail() }, 10) }, _formateDateTime: function (a) {
        if (a.indexOf("0001") == 0) return ""; var b = a, d = a.indexOf("+"); d >= 0 && (b = b.substr(0, d)); d = a.indexOf("."); d >= 0 && (b = b.substr(0, d)); d = a.indexOf("Z"); d >=
            0 && (b = b.substr(0, d)); return b = b.replace("T", " ")
    }, _isGroup: function (a) { var b = this._plumb.getGroups(), d; for (d in b) if (b[d].id == a) return !0; return !1 }, _paintConnection: function (a, b) {
        b == null && (b = {}); var d = b.link_type || this.flowModel.link_type || "Flowchart", c = b.source_id.indexOf("tip_") >= 0 || b.target_id.indexOf("tip_") >= 0, f = this._isGroup(b.source_id) || this._isGroup(b.target_id), e = b.source_id.indexOf("list_") >= 0 || b.target_id.indexOf("list_") >= 0, g = b.lineStyle || "solid", l = b.active || "true", k = b.hoverPaintStyle,
            h = { stroke: this._themeObj.default_link_color, radius: this._themeObj.default_link_radius, strokeWidth: this._themeObj.default_link_strokeWidth, outlineStroke: "transparent", outlineWidth: this._themeObj.default_link_outlineWidth }; h = andflow_util.extend(h, b.paintStyle); var m = { stroke: this._themeObj.default_link_color_hover, radius: this._themeObj.default_link_radius_hover, strokeWidth: this._themeObj.default_link_strokeWidth_hover, outlineStroke: "transparent", outlineWidth: this._themeObj.default_link_outlineWidth_hover };
        m = andflow_util.extend(m, k); g == "dotted" || l != null && l == "false" ? (h.dashstyle = "2 1", m.dashstyle = "2 1") : (h.dashstyle = "1 0", m.dashstyle = "1 0"); c ? (h.stroke = this._themeObj.default_link_color_t, h.radius = this._themeObj.default_link_radius_t, h.strokeWidth = this._themeObj.default_link_strokeWidth_t, h.outlineStroke = "transparent", h.outlineWidth = this._themeObj.default_link_outlineWidth_t, m.stroke = this._themeObj.default_link_color_t_hover, m.radius = this._themeObj.default_link_radius_t_hover, m.strokeWidth = this._themeObj.default_link_strokeWidth_t_hover,
            m.outlineStroke = "transparent", m.outlineWidth = this._themeObj.default_link_outlineWidth_t_hover, h.dashstyle = "5 3", m.dashstyle = "5 3") : f && (h.stroke = this._themeObj.default_link_color_g, h.radius = this._themeObj.default_link_radius_g, h.strokeWidth = this._themeObj.default_link_strokeWidth_g, h.outlineStroke = "transparent", h.outlineWidth = this._themeObj.default_link_outlineWidth_g, m.stroke = this._themeObj.default_link_color_g_hover, m.radius = this._themeObj.default_link_radius_g_hover, m.strokeWidth = this._themeObj.default_link_strokeWidth_g_hover,
                m.outlineStroke = "transparent", m.outlineWidth = this._themeObj.default_link_outlineWidth_g_hover); a.setType(d); a.setPaintStyle(h); a.setHoverPaintStyle(m); a.getOverlay("arrow_source").setVisible(!1); a.getOverlay("arrow_middle").setVisible(!1); a.getOverlay("arrow_target").setVisible(!0); b.source_id.indexOf("list_") >= 0 && (a.getOverlay("arrow_source").setVisible(!1), a.getOverlay("label_source").setVisible(!0)); b.target_id.indexOf("list_") >= 0 && (a.getOverlay("arrow_target").setVisible(!1), a.getOverlay("label_target").setVisible(!0));
        b.arrows && b.arrows.length > 0 && (b.arrows[0] ? a.getOverlay("arrow_source").setVisible(!0) : a.getOverlay("arrow_source").setVisible(!1), b.arrows.length > 1 && b.arrows[1] ? a.getOverlay("arrow_middle").setVisible(!0) : a.getOverlay("arrow_middle").setVisible(!1), b.arrows.length > 2 && b.arrows[2] ? a.getOverlay("arrow_target").setVisible(!0) : a.getOverlay("arrow_target").setVisible(!1)); a.getOverlay("animation").width = this._themeObj.default_link_strokeWidth_g * 2; a.getOverlay("animation").length = this._themeObj.default_link_strokeWidth_g *
            2; a.getOverlay("animation").setVisible(!1); g = b.title || b.label || ""; a.getOverlay("label").setVisible(g.length > 0); a.getOverlay("label").setLabel(g); g = b.label_source || ""; a.getOverlay("label_source").setVisible(g.length > 0); a.getOverlay("label_source").setLabel(g); g = b.label_target || ""; a.getOverlay("label_target").setVisible(g.length > 0); a.getOverlay("label_target").setLabel(g); b.show_remove || e ? a.getOverlay("label_remove").setVisible(!0) : a.getOverlay("label_remove").setVisible(!1); c ? (a.getOverlay("arrow_source").setVisible(!1),
                a.getOverlay("arrow_middle").setVisible(!1), a.getOverlay("arrow_target").setVisible(!1)) : f && (a.getOverlay("arrow_source").width = this._themeObj.default_link_strokeWidth_g * 3, a.getOverlay("arrow_source").length = this._themeObj.default_link_strokeWidth_g * 3, a.getOverlay("arrow_target").width = this._themeObj.default_link_strokeWidth_g * 3, a.getOverlay("arrow_target").length = this._themeObj.default_link_strokeWidth_g * 3, a.getOverlay("arrow_middle").width = this._themeObj.default_link_strokeWidth_g * 3, a.getOverlay("arrow_middle").length =
                    this._themeObj.default_link_strokeWidth_g * 3); a.data = b; this.render_link && this.render_link(a, d, b)
    }, _paintConnectionState: function (a, b) {
        b == -1 || b == "error" ? a.setPaintStyle({ stroke: this._themeObj.default_link_color_error, radius: this._themeObj.default_link_radius_error, strokeWidth: this._themeObj.default_link_strokeWidth_error, outlineStroke: "transparent", outlineWidth: this._themeObj.default_link_outlineWidth_error }) : b == 1 || b == "success" ? a.setPaintStyle({
            stroke: this._themeObj.default_link_color_success, radius: this._themeObj.default_link_radius_success,
            strokeWidth: this._themeObj.default_link_strokeWidth_success, outlineStroke: "transparent", outlineWidth: this._themeObj.default_link_outlineWidth_success
        }) : b == 0 || b == "reject" ? a.setPaintStyle({ stroke: this._themeObj.default_link_color_reject, radius: this._themeObj.default_link_radius_reject, strokeWidth: this._themeObj.default_link_strokeWidth_reject, outlineStroke: "transparent", outlineWidth: this._themeObj.default_link_outlineWidth_reject }) : a.setPaintStyle({
            stroke: this._themeObj.default_link_color, radius: this._themeObj.default_link_radius,
            strokeWidth: this._themeObj.default_link_strokeWidth, outlineStroke: "transparent", outlineWidth: this._themeObj.default_link_outlineWidth
        })
    }, newInstance: function (a, b) {
        var d = this; d.containerId = a; d.isMobile = andflow_util.isMobile(); d.isMobile && (d._event_name_mousedown = "touchstart", d._event_name_mouseup = "touchend", d._event_name_mousemove = "touchmove", d._event_name_click = "touchend", d._event_name_dblclick = "longtap"); d = andflow_util.extend(d, b); d.flowModel == null && (d.flowModel = {}); d.flowModel.theme == null && (d.flowModel.theme =
            "flow_theme_default"); d.flowModel.link_type == null && (d.flowModel.link_type = "Flowchart"); d._connectionTypes[d.flowModel.link_type] == null && (d.flowModel.link_type = "Flowchart"); d._initHtml(a); d._initMetadata(); d._initTheme(); d._initPlumb(); d._initEvents(); d._initAnimaction(); return d
    }, refresh: function () { this.flowModel = this.getFlow(); this._initTheme(); this._initPlumb(); this.showFlow(); this.setActionStates(); this.setLinkStates(); this.setActionContents() }, repaint: function () { this._plumb && this._plumb.repaintEverything() },
    setTheme: function (a) { this.flowModel.theme = a || this.flowModel.theme || "flow_theme_default"; this._themeObj = flow_themes[this.flowModel.theme]; a = document.getElementById(this.containerId).querySelector(".andflow"); for (var b in flow_themes) andflow_util.removeClass(a, b); andflow_util.addClass(a, this.flowModel.theme); this._plumb && this._plumb.repaintEverything() }, registActionScript: function (a, b) { this._actionScript[a] = b }, getActionScript: function (a) { return this._actionScript[a] }, getMetadata: function (a) {
        for (var b in this.metadata) {
            var d =
                this.metadata[b]; if (a == d.name) return d
        } return null
    }, getMetadatas: function () { return this.metadata }, getDict: function (a) { if (a == null || a == "") return null; var b = this.getFlow().dict, d; for (d in b) { var c = b[d]; if (c.name == a) return c.label } return null }, getDicts: function () { return this.getFlow().dict }, getActionInfo: function (a) { return this.getAction(a) }, setActionInfo: function (a) { this._actionInfos[a.id] = a; this.renderAction(a) }, renderAction: function (a) {
        var b = document.getElementById(a.id); if (b && a.id != null) {
            var d = a.name;
            if (d != null) {
                var c = this.getMetadata(d) || {}, f = a.title || a.des || c.title || c.des || "", e = a.icon || c.icon || "", g = a.css || c.css || "", l = a.border_color, k = a.header_color, h = a.header_text_color, m = a.body_color, n = a.body_text_color, u = a.theme || c.theme || ""; c = a.content; var q = a.left, p = a.top, t = a.width, v = a.height, r = "", w = ""; (action_themes[u || ""] || this._themeObj).is_body_resizable && (r = a.body_width, w = a.body_height); g && g.length > 0 && andflow_util.addClass(b.querySelector(".action"), g); andflow_util.setAttr(b.querySelector(".action"),
                    "title", f); andflow_util.setAttr(b.querySelector(".action"), "name", d); andflow_util.setAttr(b.querySelector(".action"), "icon", e); for (var x in action_themes) andflow_util.removeClass(b, x); u && u.length > 0 && andflow_util.addClass(b, u); d = e && e.length > 0 && e.indexOf("base64") >= 0 ? e : e && e.length > 0 ? (this.img_path || "") + e : (this.img_path || "") + "node.png"; andflow_util.setAttr(b.querySelector(".action-icon img"), "src", d); this.setActionTitle(a.id, f); this.flowModel.show_action_body == "false" && andflow_util.hide(b.querySelector(".action-body"));
                this.flowModel.show_action_content == "false" && andflow_util.hide(b.querySelector(".action-content")); l && b.style.setProperty("--action-border-color", l); k && b.style.setProperty("--action-header-color", k); h && b.style.setProperty("--action-header-text-color", h); m && b.style.setProperty("--action-body-color", m); n && b.style.setProperty("--action-body-text-color", n); c && (typeof c === "string" && (c = { content_type: "msg", content: c }), this.setActionContent(a.id, c.content || "", c.content_type || "msg")); andflow_util.setStyle(b,
                    "position", "absolute"); q && (q + "").indexOf("px") >= 0 ? andflow_util.setStyle(b, "left", q) : andflow_util.setStyle(b, "left", q + "px"); p && (p + "").indexOf("px") >= 0 ? andflow_util.setStyle(b, "top", p) : andflow_util.setStyle(b, "top", p + "px"); t && (t && (t + "").indexOf("px") >= 0 ? andflow_util.setStyle(b.querySelector(".action-master"), "width", t) : andflow_util.setStyle(b.querySelector(".action-master"), "width", t + "px")); v && (v && (v + "").indexOf("px") >= 0 ? andflow_util.setStyle(b.querySelector(".action-master"), "height", v) : andflow_util.setStyle(b.querySelector(".action-master"),
                        "height", v + "px")); r && r.length > 0 ? (andflow_util.setAttr(b, "body_width", r), r.indexOf("px") < 0 && (r += "px"), andflow_util.setStyle(b.querySelector(".action-body"), "width", r)) : andflow_util.setStyle(b.querySelector(".action-body"), "width", ""); w && w.length > 0 ? (andflow_util.setAttr(b, "body_height", w), w.indexOf("px") < 0 && (w += "px"), andflow_util.setStyle(b.querySelector(".action-body"), "height", w)) : andflow_util.setStyle(b.querySelector(".action-body"), "height", "")
            }
        }
    }, delActionInfo: function (a) {
        this._actionInfos[a] =
        null
    }, setActionParam: function (a, b, d) { this._actionInfos && this._actionInfos[a] && (this._actionInfos[a].params || (this._actionInfos[a].params = {}), this._actionInfos[a].params[b] = d) }, getActionParam: function (a, b) { return this._actionInfos && this._actionInfos[a] && this._actionInfos[a].params ? this._actionInfos[a].params[b] : null }, setActionBorderColor: function (a, b) { this._actionInfos && this._actionInfos[a] && (this._actionInfos[a].border_color = b, this.renderAction(this._actionInfos[a])) }, setActionHeaderColor: function (a,
        b) { this._actionInfos && this._actionInfos[a] && (this._actionInfos[a].header_color = b, this.renderAction(this._actionInfos[a])) }, setActionHeaderTextColor: function (a, b) { this._actionInfos && this._actionInfos[a] && (this._actionInfos[a].header_text_color = b, this.renderAction(this._actionInfos[a])) }, setActionBodyColor: function (a, b) { this._actionInfos && this._actionInfos[a] && (this._actionInfos[a].body_color = b, this.renderAction(this._actionInfos[a])) }, setActionBodyTextColor: function (a, b) {
            this._actionInfos && this._actionInfos[a] &&
            (this._actionInfos[a].body_text_color = b, this.renderAction(this._actionInfos[a]))
        }, getGroupInfo: function (a) { return this._groupInfos[a] }, setGroupInfo: function (a) { this._groupInfos[a.id] = a; this.renderGroup(a) }, renderGroup: function (a) {
            var b = document.getElementById(a.id); if (b) {
                var d = this.getMetadata(a.name) || {}, c = a.border_color, f = a.header_color, e = a.header_text_color, g = a.body_color, l = a.body_text_color, k = a.theme || d.theme || ""; d = a.members || []; for (var h in action_themes) andflow_util.removeClass(b, h); k && k.length >
                    0 && andflow_util.addClass(b, k); c && b.style.setProperty("--group-border-color", c); f && b.style.setProperty("--group-header-color", f); e && b.style.setProperty("--group-header-text-color", e); g && b.style.setProperty("--group-body-color", g); l && b.style.setProperty("--group-body-text-color", l); b.querySelector(".group-header") && (b.querySelector(".group-header").innerHTML = a.title || ""); b.querySelector(".group-body") && (b.querySelector(".group-body").innerHTML = a.des || ""); var m = document.querySelector("#" + this.containerId +
                        " #canvas"); if (a.left == null || a.left == "auto") { if (d.length > 0) { c = 9999999999999; for (var n in d) f = document.getElementById(d[n]).offsetLeft - m.offsetLeft, c > f && (c = f); andflow_util.setStyle(b, "left", c - 10 + "px") } } else (a.left + "").indexOf("px") >= 0 ? andflow_util.setStyle(b, "left", a.left) : andflow_util.setStyle(b, "left", a.left + "px"); if (a.top == null || a.top == "auto") { if (d.length > 0) { c = 999999999; for (n in d) f = document.getElementById(d[n]).offsetTop - m.offsetTop, c > f && (c = f); andflow_util.setStyle(b, "top", c - 30 + "px") } } else (a.top +
                            "").indexOf("px") >= 0 ? andflow_util.setStyle(b, "top", a.top) : andflow_util.setStyle(b, "top", a.top + "px"); if (a.width == null || a.width == "auto") { if (d.length > 0) { var u = 0; for (n in d) document.getElementById(d[n]).querySelectorAll("div").forEach(function (p, t) { p = p.offsetLeft + p.offsetWidth; p = p - b.offsetLeft - m.offsetLeft; p > u && (u = p) }); u += 10; andflow_util.setStyle(b.querySelector(".group-main"), "width", u) } } else (a.width + "").indexOf("px") >= 0 ? andflow_util.setStyle(b.querySelector(".group-main"), "width", a.width) : andflow_util.setStyle(b.querySelector(".group-main"),
                                "width", a.width + "px"); if (a.height == null || a.height == "auto") { if (d.length > 0) { var q = 0; for (n in d) document.getElementById(d[n]).querySelector("div").forEach(function (p, t) { p = p.offsetTop + p.offsetHeight; p = p - b.offsetTop - m.offsetTop; p > q && (q = p) }); q += 10; andflow_util.setStyle(b.querySelector(".group-main"), "height", q) } } else (a.height + "").indexOf("px") >= 0 ? andflow_util.setStyle(b.querySelector(".group-main"), "height", a.height) : andflow_util.setStyle(b.querySelector(".group-main"), "height", a.height + "px")
            }
        }, getGroupTitle: function (a) { return this._groupInfos[a].title },
    setGroupTitle: function (a, b) { a = this._groupInfos[a]; a != null && (a.title = b, this._groupInfos[a.id] = a, document.querySelector("#" + this.containerId + " #" + a.id).querySelector(".group-header").innerHTML = a.title) }, setGroupBorderColor: function (a, b) { this._groupInfos[a] && (this._groupInfos[a].border_color = b, this.renderGroup(this._groupInfos[a])) }, setGroupHeaderColor: function (a, b) { this._groupInfos[a] && (this._groupInfos[a].header_color = b, this.renderGroup(this._groupInfos[a])) }, setGroupHeaderTextColor: function (a, b) {
        this._groupInfos[a] &&
        (this._groupInfos[a].header_text_color = b, this.renderGroup(this._groupInfos[a]))
    }, setGroupBodyColor: function (a, b) { this._groupInfos[a] && (this._groupInfos[a].body_color = b, this.renderGroup(this._groupInfos[a])) }, setGroupBodyTextColor: function (a, b) { this._groupInfos[a] && (this._groupInfos[a].body_text_color = b, this.renderGroup(this._groupInfos[a])) }, getListInfo: function (a) { return this._listInfos[a] }, setListInfo: function (a) { this._listInfos[a.id] = a; this.renderList(a) }, renderList: function (a) {
        var b = document.getElementById(a.id);
        if (b) {
            var d = a.id, c = this.getMetadata(a.name) || {}; c = a.theme || c.theme || ""; var f = a.border_color, e = a.header_color, g = a.header_text_color, l = a.body_color, k = a.body_text_color, h = a.item_color, m = a.item_text_color, n = a.items, u = a.left, q = a.top, p; for (p in action_themes) andflow_util.removeClass(b, p); c && c.length > 0 && andflow_util.addClass(b, c); b.querySelector(".list-header").innerHTML = a.title || ""; f && b.style.setProperty("--list-border-color", f); e && b.style.setProperty("--list-header-color", e); g && b.style.setProperty("--list-header-text-color",
                g); l && b.style.setProperty("--list-body-color", l); k && b.style.setProperty("--list-body-text-color", k); h && b.style.setProperty("--list-item-color", h); m && b.style.setProperty("--list-item-text-color", m); a.width != void 0 && a.width != null && ((a.width + "").indexOf("px") >= 0 ? andflow_util.setStyle(b.querySelector(".list-main"), "width", a.width) : andflow_util.setStyle(b.querySelector(".list-main"), "width", a.width + "px")); a.height != void 0 && a.height != null && ((a.height + "").indexOf("px") >= 0 ? andflow_util.setStyle(b.querySelector(".list-main"),
                    "height", a.height) : andflow_util.setStyle(b.querySelector(".list-main"), "height", a.height + "px")); (q + "").indexOf("px") >= 0 ? andflow_util.setStyle(b, "top", q) : andflow_util.setStyle(b, "top", q + "px"); (u + "").indexOf("px") >= 0 ? andflow_util.setStyle(b, "left", u) : andflow_util.setStyle(b, "left", u + "px"); this._setListItems(d, n)
        }
    }, getListTitle: function (a) { return (this._listInfos[a] || {}).title }, setListTitle: function (a, b) {
        a = this._listInfos[a]; a != null && (a.title = b, this._listInfos[a.id] = a, document.getElementById(a.id).querySelector(".list-header").innerHTML =
            a.title || "")
    }, getListItems: function (a) { return (this._listInfos[a] || {}).items }, setListItems: function (a, b) { var d = this._listInfos[a]; d != null && (d.items = b, this._listInfos[a] = d, this._setListItems(a, b), this.refresh()) }, setListBorderColor: function (a, b) { this._listInfos[a] && (this._listInfos[a].border_color = b, this.renderList(this._listInfos[a])) }, setListHeaderColor: function (a, b) { this._listInfos[a] && (this._listInfos[a].header_color = b, this.renderList(this._listInfos[a])) }, setListHeaderTextColor: function (a, b) {
        this._listInfos[a] &&
        (this._listInfos[a].header_text_color = b, this.renderList(this._listInfos[a]))
    }, setListBodyColor: function (a, b) { this._listInfos[a] && (this._listInfos[a].body_color = b, this.renderList(this._listInfos[a])) }, setListBodyTextColor: function (a, b) { this._listInfos[a] && (this._listInfos[a].body_text_color = b, this.renderList(this._listInfos[a])) }, setListItemColor: function (a, b) { this._listInfos[a] && (this._listInfos[a].item_color = b, this.renderList(this._listInfos[a])) }, setListItemTextColor: function (a, b) {
        this._listInfos[a] &&
        (this._listInfos[a].item_text_color = b, this.renderList(this._listInfos[a]))
    }, getTipInfo: function (a) { return this._tipInfos[a] }, setTipInfo: function (a) { this._tipInfos[a.id] = a; this.renderTip(a) }, renderTip: function (a) {
        var b = document.getElementById(a.id); if (b) {
            var d = this.getMetadata(a.name) || {}; d = a.theme || d.theme || ""; var c = a.content, f = a.border_color, e = a.body_color, g = a.body_text_color, l = a.header_color, k = a.header_text_color, h; for (h in action_themes) andflow_util.removeClass(b, h); d && d.length > 0 && andflow_util.addClass(b,
                d); (a.left + "").indexOf("px") >= 0 ? andflow_util.setStyle(b, "left", a.left) : andflow_util.setStyle(b, "left", a.left + "px"); (a.top + "").indexOf("px") >= 0 ? andflow_util.setStyle(b, "top", a.top) : andflow_util.setStyle(b, "top", a.top + "px"); (a.width + "").indexOf("px") >= 0 ? andflow_util.setStyle(b.querySelector(".tip-main"), "width", a.width) : andflow_util.setStyle(b.querySelector(".tip-main"), "width", a.width + "px"); (a.height + "").indexOf("px") >= 0 ? andflow_util.setStyle(b.querySelector(".tip-main"), "height", a.height) : andflow_util.setStyle(b.querySelector(".tip-main"),
                    "height", a.height + "px"); f && b.style.setProperty("--tip-border-color", f); l && b.style.setProperty("--tip-header-color", l); k && b.style.setProperty("--tip-header-text-color", k); e && b.style.setProperty("--tip-body-color", e); g && b.style.setProperty("--tip-body-text-color", g); c &&= c.replaceAll("\n", "<br/>"); b.querySelector(".tip-header").innerHTML = a.title || ""; b.querySelector(".tip-body").innerHTML = c || ""
        }
    }, getTipTitle: function (a) { return this._tipInfos[a] ? this._tipInfos[a].title : null }, setTipTitle: function (a, b) {
        if (this._tipInfos[a]) {
            var d =
                document.getElementById(a); this._tipInfos[a].title = b; d.querySelector(".tip-header").innerHTML = b || ""
        }
    }, getTipContent: function (a) { return this._tipInfos[a] ? this._tipInfos[a].content : null }, setTipContent: function (a, b) { if (this._tipInfos[a]) { var d = document.getElementById(a); this._tipInfos[a].content = b; d.querySelector(".tip-body").innerHTML = b || "" } }, setTipBorderColor: function (a, b) {
        if (this._tipInfos[a]) {
            var d = document.getElementById(a); this._tipInfos[a].border_color = b; d.style.setProperty("--tip-border-color",
                b)
        }
    }, setTipBodyColor: function (a, b) { if (this._tipInfos[a]) { var d = document.getElementById(a); this._tipInfos[a].body_color = b; d.style.setProperty("--tip-body-color", b) } }, setTipBodyTextColor: function (a, b) { if (this._tipInfos[a]) { var d = document.getElementById(a); this._tipInfos[a].body_text_color = b; d.style.setProperty("--tip-body-text-color", b) } }, getLinkInfo: function (a, b) { return this._linkInfos[a + "-" + b] || {} }, setLinkInfo: function (a) {
        var b = this._linkInfos[a.source_id + "-" + a.target_id]; b = andflow_util.extend(b,
            a); this._linkInfos[a.source_id + "-" + a.target_id] = b; this.renderLink(b)
    }, renderLink: function (a) { var b = this.getConnection(a.source_id, a.target_id); b != null && (this._paintConnection(b, a), this._plumb.repaintEverything()) }, delLinkInfo: function (a, b) { this._linkInfos[a + "-" + b] = null }, getLinkPaintStyle: function (a, b) { var d = this._linkInfos[d.source_id + "-" + d.target_id] || { source_id: a, target_id: b }; return d.paintStyle }, setLinkPaintStyle: function (a, b, d) {
        var c = this._linkInfos[c.source_id + "-" + c.target_id] || {
            source_id: a,
            target_id: b
        }; c.paintStyle = d; this.setLinkInfo(c)
    }, setLinkTitle: function (a, b, d) { var c = this._linkInfos[c.source_id + "-" + c.target_id] || { source_id: a, target_id: b }; c.title = d; this.setLinkInfo(c) }, getLinkTitle: function (a, b) { return (this._linkInfos[a + "-" + b] || {}).title }, setLinkLabel: function (a, b, d) { this.setLinkTitle(a, b, d) }, getLinkLabel: function (a, b) { return this.sgtLinkTitle(a, b) }, setLinkSourceLabel: function (a, b, d) {
        var c = this._linkInfos[c.source_id + "-" + c.target_id] || { source_id: a, target_id: b }; c.label_source = d;
        this.setLinkInfo(c)
    }, getLinkSourceLabel: function (a, b) { return (this._linkInfos[a + "-" + b] || {}).label_source }, setLinkTargetLabel: function (a, b, d) { var c = this._linkInfos[c.source_id + "-" + c.target_id] || { source_id: a, target_id: b }; c.label_target = d; this.setLinkInfo(c) }, getLinkTargetLabel: function (a, b) { return (this._linkInfos[a + "-" + b] || {}).label_target }, removeGroup: function (a, b) { a = this._plumb.getGroup(a); b = b || this._groupInfos[a.id].delete_all || !1; b != 1 && (b = !1); a.getEl(); this._plumb.removeGroup(a, b) }, removeList: function (a) {
        a =
        document.getElementById(a); this._plumb.remove(a); andflow_util.removeElement(a)
    }, removeTip: function (a) { a = document.getElementById(a); this._plumb.remove(a); andflow_util.removeElement(a) }, removeAction: function (a) {
        var b = document.getElementById(a); if (b) {
            var d = this._plumb.getGroups(), c; for (c in d) { var f = d[c].getMembers(), e; for (e in f) f[e].id == a && d[c].remove(b, null, !0) } this._plumb.remove(b); andflow_util.removeElement(b); b = this._actionInfos[a]; this.delActionInfo(a); this._actionCharts[a] = null; this._actionCharts[a] !=
                null && this._actionCharts[a].dispose(); this._actionContents[a] = null; this.event_action_remove && this.event_action_remove(b); this._onCanvasChanged()
        }
    }, removeLink: function (a, b) { var d = this.getConnection(a, b); d != null && (this.delLinkInfo(a, b), this._plumb.deleteConnection(d), this._plumb.repaintEverything(), this.event_link_remove && this.event_link_remove(this._linkInfos[a + "-" + b]), this._onCanvasChanged()) }, removeLinkBySource: function (a) {
        var b = this.getConnectionsBySource(a), d; for (d in b) {
            var c = b[d], f = c.targetId;
            this.delLinkInfo(a, f); this._plumb.deleteConnection(c); this._plumb.repaintEverything(); this.event_link_remove && this.event_link_remove(this._linkInfos[a + "-" + f]); this._onCanvasChanged()
        }
    }, removeLinkByTarget: function (a) { var b = this.getConnectionsByTarget(a), d; for (d in b) { var c = b[d], f = c.sourceId; this.delLinkInfo(f, a); this._plumb.deleteConnection(c); this._plumb.repaintEverything(); this.event_link_remove && this.event_link_remove(this._linkInfos[f + "-" + a]); this._onCanvasChanged() } }, setEditable: function (a) {
        this.editable =
        a; this.editable == 1 ? andflow_util.removeClass("#" + this.containerId + " .andflow", "state") : andflow_util.addClass("#" + this.containerId + " .andflow", "state")
    }, getEditable: function () { return this.editable }, setFlow: function (a) { this.flowModel = a }, showFlow: function (a) {
        var b = this; a && (this.flowModel = a); this._actionInfos = {}; this._linkInfos = {}; this._groupInfos = {}; this._listInfos = {}; this._tipInfos = {}; this._actionContents = {}; this._actionCharts = {}; this._action_states = []; this._link_states = []; this._plumb.deleteEveryConnection();
        document.querySelectorAll(".action").forEach(function (k, h) { k = k.parentElement; b._plumb.remove(k); andflow_util.removeElement(k) }); document.querySelectorAll(".group").forEach(function (k, h) { b._plumb.remove(k); andflow_util.removeElement(k) }); document.querySelectorAll(".tip").forEach(function (k, h) { b._plumb.remove(k); andflow_util.removeElement(k) }); document.querySelectorAll(".list-item").forEach(function (k, h) { b._plumb.remove(k); andflow_util.removeElement(k) }); this._plumb.removeAllGroups(!0); document.getElementById("canvas").innerHtml =
            ""; if ((a = this.flowModel) && a.actions) for (var d in a.actions) this._createAction(a.actions[d]); if (a && a.tips) for (d in a.tips) this._createTip(a.tips[d]); if (a && a.lists) for (var c in a.lists) this._createList(a.lists[c]); if (a && a.groups) for (var f in a.groups) this._createGroup(a.groups[f]); if (a && a.links) for (var e in a.links) d = a.links[e], c = this._plumb.connect({ source: d.source_id, target: d.target_id }), c != void 0 && c != null && this.setLinkInfo(d); for (var g in a.actions) {
                e = this._plumb.getEndpoints(a.actions[g].id); for (var l in e) d =
                    e[l], d.setPaintStyle({ stroke: this._themeObj.default_endpoint_stroke_color, fill: this._themeObj.default_endpoint_fill_color, radius: this._themeObj.default_endpoint_radius, strokeWidth: this._themeObj.default_endpoint_strokeWidth }), d.setHoverPaintStyle({ stroke: this._themeObj.default_endpoint_stroke_color_hover, fill: this._themeObj.default_endpoint_fill_color_hover, radius: this._themeObj.default_endpoint_radius_hover, strokeWidth: this._themeObj.default_endpoint_strokeWidth_hover })
            } this._plumb.repaintEverything()
    },
    getFlow: function () { var a = this.getActions(), b = this.getLinks(), d = this.getGroups(), c = this.getLists(), f = this.getTips(); this.flowModel.actions = a; this.flowModel.groups = d; this.flowModel.lists = c; this.flowModel.links = b; this.flowModel.tips = f; return this.flowModel }, clearActionState: function () { var a = document.querySelector("#" + this.containerId + " .action"); andflow_util.removeClass(a, "error"); andflow_util.removeClass(a, "execute"); andflow_util.removeClass(a, "reject"); andflow_util.removeClass(a, "success") }, setActionSelected: function (a,
        b) { a != null && a != "" && document.getElementById(a) && (b ? andflow_util.addClass(document.getElementById(a).querySelector(".action"), "selected") : andflow_util.removeClass(document.getElementById(a).querySelector(".action"), "selected")) }, setActionIcon: function (a, b) { b != null && b.length > 0 && andflow_util.setAttr(document.getElementById(a).querySelector(".action-icon img"), "src", this.img_path + b) }, setActionState: function (a, b) {
            if (a != null && a != "") if (a = document.getElementById(a).querySelector(".action"), b == null || b == "" ||
                b == 0) andflow_util.removeClass(a, "error"), andflow_util.removeClass(a, "execute"), andflow_util.removeClass(a, "reject"), andflow_util.removeClass(a, "success"); else if (b == -1 || b == "error") andflow_util.removeClass(a, "error"), andflow_util.removeClass(a, "execute"), andflow_util.removeClass(a, "reject"), andflow_util.removeClass(a, "success"), a.className.indexOf("error") < 0 && andflow_util.addClass(a, "error"); else if (b == 1 || b == "success") andflow_util.removeClass(a, "error"), andflow_util.removeClass(a, "execute"), andflow_util.removeClass(a,
                    "reject"), andflow_util.removeClass(a, "success"), a.className.indexOf("success") < 0 && andflow_util.addClass(a, "success"); else if (b == 0 || b == "reject") andflow_util.removeClass(a, "error"), andflow_util.removeClass(a, "execute"), andflow_util.removeClass(a, "reject"), andflow_util.removeClass(a, "success"), a.className.indexOf("reject") < 0 && andflow_util.addClass(a, "reject")
        }, setActionStates: function (a) {
            if (a == void 0 || a == null) a = this._action_states; this._action_states = a; document.querySelectorAll("#" + this.containerId +
                " .action").forEach(function (g, l) { andflow_util.removeClass(g, "success"); andflow_util.removeClass(g, "error"); andflow_util.removeClass(g, "execute") }); var b = {}; for (f in a) { var d = a[f].action_id; b[d] = a[f] } a = this.getActions(); for (var c in a) { d = a[c].id; var f = b[d]; if (f != null) { var e = f.state; f.is_error && (e = -1); this.setActionState(d, e); this.setActionIcon(d, f.action_icon); f = f.content; f.action_id = d; this.showActionContent(f) } }
        }, setLinkState(a, b, d) {
            a = this.getConnection(a, b); a != null && (b = a.data, b != null && b.active ==
                "false" || this._paintConnectionState(a, d))
        }, setLinkStates: function (a) { for (var b = this._plumb.getAllConnections(), d = 0; d < b.length; d++)this._paintConnectionState(b[d], 9); if (a == void 0 || a == null) a = this._link_states; this._link_states = a; for (d in a) { var c = a[d]; b = c.source_action_id; var f = c.target_action_id, e = c.state; c = c.is_error; if (c == 1 || c == 1 || c == "true") e = -1; this.setLinkState(b, f, e) } this._plumb.repaintEverything() }, setLinkType: function (a) { this.flowModel.link_type = a; this.refresh() }, getGroups: function () {
            var a =
                [], b = this._plumb.getGroups(), d; for (d in b) { var c = b[d], f = c.id, e = c.getEl(); c = c.getMembers(); f = this._groupInfos[f]; f.members = []; for (var g in c) f.members.push(c[g].id); f.left != "auto" && (f.left = e.offsetLeft + "px"); f.top != "auto" && (f.top = e.offsetTop + "px"); f.width != "auto" && (f.width = e.offsetWidth + "px"); f.height != "auto" && (f.height = e.offsetHeight + "px"); a.push(f) } return a
        }, getLists: function () {
            var a = this, b = []; document.querySelectorAll("#" + a.containerId + " #canvas .list").forEach(function (d, c) {
                c = d.id; c = a._listInfos[c] ||
                    { id: c, left: "", top: "", width: "", height: "" }; d.parentElement.className.indexOf("group-container") >= 0 ? (c.left = d.offsetLeft + d.parentElement.offsetLeft + "px", c.top = d.offsetTop + d.parentElement.offsetTop + "px") : (c.left = d.offsetLeft + "px", c.top = d.offsetTop + "px"); c.width = d.offsetWidth + "px"; c.height = d.offsetHeight + "px"; b.push(c)
            }); return b
        }, getTips: function () {
            var a = this, b = []; document.querySelectorAll("#" + a.containerId + " #canvas .tip").forEach(function (d, c) {
                c = d.id; c = a._tipInfos[c] || {
                    id: c, left: "", top: "", width: "",
                    height: ""
                }; d.parentElement.className.indexOf("group-container") >= 0 ? (c.left = d.offsetLeft + d.parentElement.offsetLeft + "px", c.top = d.offsetTop + d.parentElement.offsetTop + "px") : (c.left = d.offsetLeft + "px", c.top = d.offsetTop + "px"); c.width = d.offsetWidth + "px"; c.height = d.offsetHeight + "px"; b.push(c)
            }); return b
        }, getAction: function (a) {
            var b = document.getElementById(a), d = b.querySelector(".action"), c = this._actionInfos[a]; c == null && (c = {}); let f = b.parentElement.className.indexOf("group-container") >= 0; c.id = a; c.name = andflow_util.getAttr(d,
                "name") || c.name; c.title = andflow_util.getAttr(d, "title") || c.title; c.icon = andflow_util.getAttr(d, "icon") || c.icon; c.des = andflow_util.getAttr(d, "des") || c.des; c.tp = andflow_util.getAttr(d, "tp") || c.tp; f ? (c.left = b.offsetLeft + b.parentElement.offsetLeft + "px", c.top = b.offsetTop + b.parentElement.offsetTop + "px") : (c.left = b.offsetLeft + "px", c.top = b.offsetTop + "px"); c.width = b.offsetWidth + "px"; c.height = b.offsetHeight + "px"; c.body_width = andflow_util.getAttr(b, "body_width"); c.body_height = andflow_util.getAttr(b, "body_height");
            return c
        }, getActions: function () { var a = this, b = []; document.querySelector("#" + this.containerId + " #canvas").querySelectorAll(".action").forEach(function (d, c) { d = a.getAction(d.parentElement.id); b.push(d) }); return b }, getLinks: function () { for (var a = [], b = this._plumb.getAllConnections(), d = 0; d < b.length; d++) { var c = b[d].sourceId, f = b[d].targetId, e = this._linkInfos[c + "-" + f]; e == null && (e = {}); e.source_id = c; e.target_id = f; this._linkInfos[c + "-" + f] = e; a.push(e) } return a }, getConnection: function (a, b) {
            for (var d = this._plumb.getAllConnections(),
                c = 0; c < d.length; c++) { var f = d[c].targetId; if (d[c].sourceId == a && f == b) return d[c] } return null
        }, getConnectionsBySource: function (a) { for (var b = this._plumb.getAllConnections(), d = [], c = 0; c < b.length; c++)b[c].sourceId == a && d.push(b[c]); return d }, getConnectionsByTarget: function (a) { for (var b = this._plumb.getAllConnections(), d = [], c = 0; c < b.length; c++)b[c].targetId == a && d.push(b[c]); return d }, horizontal: function () {
            var a = this._selecting_objs; if (a == null || a.length == 0) a = [], this._getContainer().querySelectorAll(".andflow_meta").forEach((d,
                c) => { a.push(d) }); var b = 0; a.forEach((d, c) => { c == 0 && (b = d.offsetTop + d.offsetHeight / 2); andflow_util.setStyle(d, "top", b - d.offsetHeight / 2 + "px") }); this._drawSelectBox(); this._plumb.repaintEverything()
        }, vertical: function () { var a = this._selecting_objs; if (a == null || a.length == 0) a = [], this._getContainer().querySelectorAll(".andflow_meta").forEach((d, c) => { a.push(d) }); var b = 0; a.forEach((d, c) => { c == 0 && (b = d.offsetLeft + d.offsetWidth / 2); andflow_util.setStyle(d, "left", b - d.offsetWidth / 2 + "px") }); this._drawSelectBox(); this._plumb.repaintEverything() },
    test: function () { alert(html2canvas); alert(jsPlumb.getInstance) }, getSnapshot: function (a, b) {
        if (andflow_util.isVisible("#canvas")) {
            var d = { backgroundColor: "white", ignore_svg: !1 }; b && (d = andflow_util.extend(d, b)); b = document.getElementById("canvas"); b.getBoundingClientRect(); var c = andflow_util.getPageLeft(b), f = andflow_util.getPageTop(b), e = b.scrollWidth, g = b.scrollHeight, l = d.scale || 1, k = document.createElement("canvas"); document.body.append(k); k.style.width = e + "px"; k.style.height = g + "px"; html2canvas(b, {
                canvas: k,
                scale: l, allowTaint: !0, foreignObjectRendering: !0, backgroundColor: d.backgroundColor || "transparent", dpi: 300, width: e, height: g, x: -c, y: -f, scrollX: 0, scrollY: 0, useCORS: !0, ignoreElements: h => !1
            }).then(function (h) { a && a(h) }); andflow_util.removeElement(k)
        }
    }, snap: function (a) { a = a || "andflow"; this.getSnapshot(function (b) { b = b.toDataURL("image/jpeg"); andflow_util.parseHtml('<a href="' + b + '" download="' + a + '.jpeg"></a>').click() }, { scale: 1, backgroundColor: "white", ignore_svg: !1 }) }, setActionContents: function (a) {
        a && (this._actionContents =
            a); if (this._actionContents != null && this._actionContents.length != 0) for (var b in this._actionContents) a = this._actionContents[b], this.setActionContent(b, a.content, a.content_type)
    }, getActionTitle: function (a) { return this._actionInfos[a].title }, setActionTitle: function (a, b) { b = b || ""; this._actionInfos[a].title = b; if (a = document.getElementById(a).querySelector(".action-header, [name='title']")) a.innerHTML = b }, setActionTheme: function (a, b) {
        this._actionInfos[a].theme = b; for (var d in flow_themes) andflow_util.removeClass(document.getElementById(a),
            d); andflow_util.addClass(document.getElementById(a), b); this._plumb && this._plumb.repaintEverything()
    }, getActionContent: function (a) { return this._actionContents[a] }, setActionContent: function (a, b, d) {
        if (a != void 0 && a != null && a != "" && this._actionInfos[a] != null && (this._actionInfos[a].content = { content_type: d, content: b }, this._actionContents[a] = { content_type: d, content: b }, this.flowModel.show_action_content != 0 && this.flowModel.show_action_content != "false")) {
            var c = document.getElementById(a).querySelectorAll('.action-content,[name="content"]');
            c && c.length != 0 && c.forEach(f => {
                switch (d) {
                    case "msg": this._actionCharts[a] != null && (this._actionCharts[a].dispose(), this._actionCharts[a] = null); f.innerHTML = "<div class='action-msg'>" + b + "</div>"; break; case "keyvalue": var e = JSON.parse(b), g = andflow_util.parseHtml('<table class="action-result-table" style="width:100%"></table>'); for (q in e) { var l = andflow_util.parseHtml('<tr><td class="action-result-label">' + q + '</td><td class="action-result-value">' + e[q] + "</td></tr>"); g.appendChild(l) } f.innerHTML = ""; f.appendChild(g);
                        andflow_util.setStyle(f, "overflow-y", "auto"); break; case "grid": this._actionCharts[a] != null && (this._actionCharts[a].dispose(), this._actionCharts[a] = null); g = JSON.parse(b); var k = g.columns; e = g.rows; var h = []; e instanceof Array ? h = e : h.push(e); if (k == null || k.length == 0) if (k = [], h.length > 0) for (q in h[0]) k.push({ name: q, title: q }); g = andflow_util.parseHtml('<table class="table" style="width:100%"></table>'); e = andflow_util.parseHtml("<tr></tr>"); for (var m in k) l = andflow_util.parseHtml("<th>" + (k[m].title || k[m].name) +
                            "</th>"), e.appendChild(l); g.appendChild(e); for (var n in h) { l = h[n]; e = []; if (l instanceof Object) for (q in k) e.push(l[k[q].name]); else e.push(l); var u = andflow_util.parseHtml("<tr></tr>"); for (m in e) l = e[m], l instanceof Object && (l = JSON.stringify(l)), l = andflow_util.parseHtml("<td>" + l + "</td>"), u.appendChild(l); g.appendChild(u) } f.innerHTML = ""; f.appendChild(g); andflow_util.setStyle(f, "overflow-y", "auto"); break; case "html": this._actionCharts[a] != null && (this._actionCharts[a].dispose(), this._actionCharts[a] = null);
                        f.innerHTML = "<div class='action-html'>" + b + "</div>"; break; case "chart": var q = JSON.parse(b); k = "chart_" + a; m = f.querySelector("#" + k); n = this._actionCharts[a]; n != null && m || (f.innerHTML = "<div id='" + k + "' class='action-chart'></div>", m = f.offsetWidth, n = f.offsetHeight, f = f.querySelector("#" + k), andflow_util.setStyle(f, "width", m + "px"), andflow_util.setStyle(f, "height", n + "px"), n = echarts.init(document.getElementById(k))); n.setOption(q); this._actionCharts[a] = n; break; case "form": this._actionCharts[a] != null && (this._actionCharts[a].dispose(),
                            this._actionCharts[a] = null); e = JSON.parse(b); f.innerHTML = '<iframe src="' + e.url + '" style="width:100%;height: 100%;" frameborder="0"></iframe>'; break; case "web": this._actionCharts[a] != null && (this._actionCharts[a].dispose(), this._actionCharts[a] = null); f.innerHTML = '<iframe src="' + b + '" style="width:100%;height: 100%;" frameborder="0"></iframe>'; break; default: this._actionCharts[a] != null && (this._actionCharts[a].dispose(), this._actionCharts[a] = null), f.innerHTML = b
                }
            })
        }
    }, showAllActionContent: function (a) {
        if (a) for (var b in a) {
            var d =
                a[b].content; d != null && this.showActionContent(d)
        }
    }, showActionContent: function (a) { a != null && a.content_type != null && a.content != null && this.setActionContent(a.action_id, a.content, a.content_type) }, setActionBodyVisible: function (a) { this.flowModel.show_action_body = a ? "true" : "false"; this.flowModel.show_action_body == "false" ? document.querySelectorAll("#" + this.containerId + " .action-body").forEach(function (b) { andflow_util.hide(b) }) : document.querySelectorAll("#" + this.containerId + " .action-body").forEach(function (b) { andflow_util.show(b) }) },
    setActionContentVisible: function (a) { this.flowModel.show_action_content = a ? "true" : "false"; this.flowModel.show_action_content == "false" || this.flowModel.show_action_content == 0 ? document.querySelectorAll("#" + this.containerId + " .action-content").forEach(function (b) { andflow_util.hide(b) }) : document.querySelectorAll("#" + this.containerId + " .action-content").forEach(function (b) { andflow_util.show(b) }) }
};