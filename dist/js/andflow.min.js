'use strict'; var andflow_util = {
    uuid: function () { function a() { return ((1 + Math.random()) * 65536 | 0).toString(16).substring(1) } return a() + a() + "-" + a() + "-" + a() + "-" + a() + "-" + a() + a() + a() }, confirm: function (a, b) { confirm(a) && b() }, extend: function (a, b) { if (a) for (var d in b) a[d] = b[d]; else a = b; return a }, parseHtml: function (a) { var b = document.createElement("div"); b.innerHTML = a; return b.firstChild }, addEventList: function (a, b, d, c) {
        a.eventList ? a.eventList[b] ? a.eventList[b].push({ callback: d, useCapture: c }) : a.eventList[b] = [{
            callback: d,
            useCapture: c
        }] : (a.eventList = {}, a.eventList[b] = [{ callback: d, useCapture: c }])
    }, removeEventList: function (a, b, d, c) { if ((a = a.eventList) && a[b]) if (d) for (c = 0; c < a[b].length; c++) { if (a[b][c].callback === d) { a[b].splice(c, 1); a[b].length === 0 && delete a[b]; break } } else delete a[b] }, getEventList: function (a, b) { var d = a; typeof a === "string" && (d = document.querySelector(a)); if (d) return (a = d.eventList) ? a[b] : null }, addEventListener: function (a, b, d, c) {
        var e = a; typeof a === "string" && (e = document.querySelector(a)); e && (e.addEventListener(b,
            d, c), andflow_util.addEventList(e, b, d, c))
    }, removeEventListener: function (a, b, d, c) { var e = a; typeof a === "string" && (e = document.querySelector(a)); e && (d ? (e.removeEventListener(b, d, c), andflow_util.removeEventList(e, b, d, c)) : (a = andflow_util.getEventList(e, b)) && a.length > 0 && (a.forEach(function (f, g) { f.callback && e.removeEventListener(b, f.callback, f.useCapture) }), andflow_util.removeEventList(e, b))) }, isVisible: function (a) {
        var b = a; typeof a === "string" && (b = document.querySelector(a)); return b ? !(b.style.display === "none" ||
            b.currentStyle && b.currentStyle === "none" || window.getComputedStyle && window.getComputedStyle(b, null).display === "none") : !1
    }, getRect: function (a) { a = a.getBoundingClientRect(); var b = document.documentElement.clientTop, d = document.documentElement.clientLeft; return { top: a.top - b, bottom: a.bottom - b, left: a.left - d, right: a.right - d } }, getLeftInCanvas(a) {
        typeof a === "string" && (a = document.querySelector(a)); if (!a) return 0; for (var b = a.offsetLeft, d = 0; a.parentNode && a.parentNode.className.indexOf("canvas") < 0 && d++ < 100;)b += a.parentNode.offsetLeft,
            a = a.parentNode; return b
    }, getTopInCanvas(a) { typeof a === "string" && (a = document.querySelector(a)); if (!a) return 0; for (var b = a.offsetTop, d = 0; a.parentNode && a.parentNode.className.indexOf("canvas") < 0 && d++ < 100;)b += a.parentNode.offsetTop, a = a.parentNode; return b }, getPageLeft: function (a) { typeof a === "string" && (a = document.querySelector(a)); return a ? andflow_util.getRect(a).left + window.scrollX : 0 }, getPageTop: function (a) {
        typeof a === "string" && (a = document.querySelector(a)); return a ? andflow_util.getRect(a).top + window.scrollY :
            0
    }, show: function (a) { var b = a; typeof a === "string" && (b = document.querySelector(a)); b && (b.style.display = "block") }, hide: function (a) { var b = a; typeof a === "string" && (b = document.querySelector(a)); b && (b.style.display = "none") }, setValue: function (a, b) { var d = a; typeof a === "string" && (d = document.querySelector(a)); d && (a = d.tagName, a == "INPUT" && (d.value = b), a == "SELECT" && (d.value = b), a == "TEXTAREA" && (d.value = b, d.innerHTML = b)) }, getValue: function (a) {
        var b = a; typeof a === "string" && (b = document.querySelector(a)); a = b.tagName; return a ==
            "INPUT" || a == "SELECT" ? b.value : a == "TEXTAREA" ? b.value || b.innerHTML : null
    }, setAttr: function (a, b, d) { var c = a; typeof a === "string" && (c = document.querySelector(a)); if (c) return c.setAttribute(b, d) }, getAttr: function (a, b) { var d = a; typeof a === "string" && (d = document.querySelector(a)); return d ? d.getAttribute(b) : null }, setStyle: function (a, b, d) { var c = a; typeof a === "string" && (c = document.querySelector(a)); c && (c.style[b] = d) }, getStyle: function (a, b) {
        var d = a; typeof a === "string" && (d = document.querySelector(a)); return d ? d.currentStyle ?
            d.currentStyle[b] : window.getComputedStyle ? (b.replace(/([A-Z])/g, "-$1"), a = b.toLowerCase(), document.defaultView.getComputedStyle(d, null)[a]) : null : null
    }, addClass: function (a, b) { var d = a; typeof a === "string" && (d = document.querySelector(a)); if (d) if (b) d.className && d.className.indexOf(b) >= 0 || (d.className ? d.className = d.className + " " + b : d.className = b); else throw Error("\u8bf7\u4f20\u9012\u4e00\u4e2a\u6709\u6548\u7684class\u7c7b\u540d"); }, removeClass: function (a, b) {
        var d = a; typeof a === "string" && (d = document.querySelector(a));
        d && (a = d.className.split(" "), b = a.indexOf(b), b > -1 && a.splice(b, 1), d.className = a.join(" "))
    }, hasClass: function (a, b) { var d = a; typeof a === "string" && (d = document.querySelector(a)); if (d) { if (b) { if (d.className && d.className.indexOf(b) >= 0) return !0 } else throw Error("\u8bf7\u4f20\u9012\u4e00\u4e2a\u6709\u6548\u7684class\u7c7b\u540d"); return !1 } }, removeElement: function (a) { var b = a; typeof a === "string" && (b = document.querySelector(a)); b && (a = b.parentNode) && a.removeChild(b) }, isMobile: function () {
        let a = navigator.userAgent;
        return "Android;iPhone;SymbianOS;Windows Phone;iPad;iPod".split(";").filter(b => a.includes(b)).length ? !0 : !1
    }
}, andflow = {
    containerId: null, img_path: "", editable: !0, tags: null, metadata: null, flowModel: null, show_grid: !0, show_toolbar: !0, show_code_btn: !0, show_scale_btn: !0, show_small_btn: !0, metadata_style: "", metadata_position: "", drag_step: 10, isMobile: !1, mousedown_event_name: "mousedown", mouseup_event_name: "mouseup", mousemove_event_name: "mousemove", click_event_name: "click", dblclick_event_name: "dblclick", render_action: null,
    render_action_helper: null, render_link: null, render_endpoint: null, render_btn_resize: null, render_btn_remove: null, event_action_click: null, event_action_dblclick: null, event_action_remove: null, event_group_click: null, event_group_dblclick: null, event_group_remove: null, event_link_click: null, event_link_dblclick: null, event_link_remove: null, event_canvas_click: null, event_canvas_dblclick: null, event_canvas_changed: null, animation_timer: null, lang: { metadata_tag_all: "\u6240\u6709\u7ec4\u4ef6", delete_action_confirm: "\u786e\u5b9a\u5220\u9664\u8be5\u8282\u70b9?" },
    _themeObj: null, _plumb: null, _actionInfos: {}, _actionScript: {}, _actionCharts: {}, _action_states: [], _actionContents: {}, _linkInfos: {}, _link_states: [], _groupInfos: {}, _listInfos: {}, _tipInfos: {}, _timer_link: null, _timer_group: null, _timer_action: null, _timer_thumbnail: null, _drag_name: null, _connectionTypes: {
        Flowchart: { anchor: "Continuous", connector: ["Flowchart", { stub: [5, 15], gap: 5, cornerRadius: 5, alwaysRespectStubs: !0 }] }, Straight: { anchor: "Continuous", connector: ["Straight", { stub: [5, 15], gap: 5, cornerRadius: 25, alwaysRespectStubs: !0 }] },
        Bezier: { anchor: "Continuous", connector: ["Bezier", { stub: [5, 15], gap: 5, cornerRadius: 25, alwaysRespectStubs: !0 }] }, StateMachine: { anchor: "Continuous", connector: ["StateMachine", { stub: [5, 15], gap: 5, cornerRadius: 25, margin: 5, alwaysRespectStubs: !0 }] }
    }, _initHtml: function (a) {
        var b = ""; this.editable == 0 && (b = "state"); var d = ""; if (this.show_toolbar == 0 || this.show_toolbar == "false") d = "toolbar_hide"; var c = this.metadata_style; if (c == null || c == "") this.metadata_position == "top" ? c = "metadata_float_top" : this.metadata_position == "left" &&
            (c = "metadata_float_left"); b = '<div class="andflow  ' + c + " " + b + " " + d + '"><div class="metadata" ><div class="tags">'; b += '<select id="tag_select">'; b += "</select>"; b += "</div>"; b += '<div class="actions">'; b += '<ul id="actionMenu" class="actionMenu" >'; b += "</ul>"; b += "</div>"; b += "</div>"; b += '<div class="designer">'; b += '<div class="flow_tools">'; b += '<div class="left">'; b += '<a class="nav_btn">&nbsp;</a>'; b += "</div>"; b += '<div class="right">'; this.show_code_btn && (b += '<a class="code_btn" title="code">&nbsp;</a>');
        this.show_scale_btn && (b += '<a class="scale_down_btn" title="\u7f29\u5c0f">-</a>', b += '<a class="scale_info" title="\u8fd8\u539f"><span class="scale_value">100</span><span>%</span></a>', b += '<a class="scale_up_btn"  title="\u653e\u5927">+</a>'); this.show_small_btn && (b += '<a class="thumbnail_btn"  title="\u7f29\u7565\u56fe">&nbsp;</a>'); b += "</div>"; b += "</div>"; b += '<div class="flow_thumbnail">'; b += '<div class="flow_thumbnail_mask"></div>'; b += "</div>"; d = ""; this.show_grid || (d = "background:none"); b += '<div id="canvasContainer" class="canvasContainer" style="' +
            d + '">'; b += '<div id="canvas" class="canvas" ></div>'; b += "</div>"; b += '<div id="codeContainer" class="codeContainer">'; b += "<textarea></textarea>"; b += "</div>"; b += "</div>"; b += "</div>"; b = andflow_util.parseHtml(b); document.getElementById(a).innerHTML = ""; document.getElementById(a).appendChild(b); document.getElementById(a).style.position = document.getElementById(a).style.position || "relative"; andflow_util.setAttr("#" + a + " .nav_btn", "state", "open"); andflow_util.setAttr("#" + a + " .thumbnail_btn", "state", "close")
    },
    _initAnimaction: function () {
        var a = this; this.animation_timer && clearInterval(this.animation_timer); this.animation_timer = setInterval(function () {
            var b = a._plumb.getAllConnections(), d; for (d in b) {
                var c = b[d]; if (a.getLinkInfo(c.sourceId, c.targetId).animation) {
                    var e = c.getOverlay("arrow_source"), f = c.getOverlay("arrow_target"), g = 0; !e.visible && f.visible ? g = 1 : e.visible && !f.visible && (g = 2); c = c.getOverlay("animation"); c.setVisible(!0); g == 1 ? (c.loc += .05, c.loc > .9 && (c.loc = .1)) : g == 2 ? (c.loc -= .05, c.loc < .1 && (c.loc = .9)) : c.diract ==
                        null || c.diract == 1 ? (c.loc += .05, c.loc > .9 && (c.diract = 2)) : (c.loc -= .05, c.loc < .1 && (c.diract = 1))
                } else c = c.getOverlay("animation"), c.setVisible(!1)
            }
        }, 100)
    }, _initEvents: function () {
        var a = this, b = a.containerId, d = document.getElementById(b); andflow_util.addEventListener(d.querySelector(".nav_btn"), "click", function (c) {
            andflow_util.getAttr("#" + a.containerId + " .nav_btn", "state") == "open" ? (andflow_util.setAttr("#" + b + " .nav_btn", "state", "close"), andflow_util.addClass("#" + b + " .andflow", "fold"), andflow_util.addClass("#" +
                b + " .nav_btn", "close")) : (andflow_util.setAttr("#" + b + " .nav_btn", "state", "open"), andflow_util.removeClass("#" + b + " .andflow", "fold"), andflow_util.removeClass("#" + b + " .nav_btn", "close"))
        }); andflow_util.addEventListener(d.querySelector(".scale_up_btn"), "click", function (c) { c = document.querySelector("#" + b + " .scale_value").innerHTML * 1; c += 1; andflow_util.setStyle("#" + b + " .canvas", "transform", "scale(" + c / 100 + ")"); document.querySelector("#" + b + " .scale_value").innerHTML = c }); andflow_util.addEventListener(d.querySelector(".scale_down_btn"),
            "click", function (c) { c = document.querySelector("#" + b + " .scale_value").innerHTML * 1; --c; andflow_util.setStyle("#" + b + " .canvas", "transform", "scale(" + c / 100 + ")"); document.querySelector("#" + b + " .scale_value").innerHTML = c }); andflow_util.addEventListener(d.querySelector(".scale_info"), "click", function (c) { andflow_util.setStyle("#" + b + " .canvas", "transform", "scale(1)"); document.querySelector("#" + b + " .scale_value").innerHTML = "100" }); andflow_util.addEventListener(d.querySelector(".canvas"), a.mousedown_event_name,
                function (c) {
                    if (c.target && c.target.className && c.target.className.indexOf && !(c.target.className.indexOf("canvas") < 0)) {
                        var e = c.targetTouches ? c.targetTouches[0].pageX : c.pageX, f = c.targetTouches ? c.targetTouches[0].pageY : c.pageY, g = c.offsetX; c = c.offsetY; g ||= e - andflow_util.getPageLeft("#" + b + " .canvas"); c ||= f - andflow_util.getPageTop("#" + b + " .canvas"); andflow_util.setAttr("#" + b + " .canvas", "drag", "true"); andflow_util.setAttr("#" + b + " .canvas", "offset_x", g); andflow_util.setAttr("#" + b + " .canvas", "offset_y", c); andflow_util.setAttr("#" +
                            b + " .canvas", "page_x", e); andflow_util.setAttr("#" + b + " .canvas", "page_y", f); andflow_util.addClass("#" + b + " .canvas", "canvas-move"); a._resizeCanvas()
                    }
                }); andflow_util.addEventListener(d.querySelector(".canvas"), a.mouseup_event_name, function (c) {
                    andflow_util.getAttr("#" + b + " .canvas", "drag") == "true" && a._onCanvasChanged(); andflow_util.setAttr("#" + b + " .canvas", "drag", "false"); andflow_util.removeClass("#" + b + " .canvas", "canvas-move"); a.event_canvas_click && (a.event_canvas_dblclick ? (a._timer_action && clearTimeout(a._timer_action),
                        a._timer_action = setTimeout(function () { a.event_canvas_click(c) }, 300)) : a.event_canvas_click(c)); c.preventDefault()
                }); andflow_util.addEventListener(d.querySelector(".canvas"), "mouseout", function (c) { andflow_util.setAttr("#" + b + " .canvas", "drag", "false") }); andflow_util.addEventListener(d.querySelector(".canvas"), a.mousemove_event_name, function (c) {
                    if (andflow_util.getAttr("#" + b + " .canvas", "drag") == "true") {
                        let h = andflow_util.getAttr("#" + b + " .canvas", "offset_x"); var e = andflow_util.getAttr("#" + b + " .canvas",
                            "offset_y"), f = c.targetTouches ? c.targetTouches[0].pageX : c.pageX, g = c.targetTouches ? c.targetTouches[0].pageY : c.pageY, k = c.offsetX; c = c.offsetY; k ||= f - andflow_util.getPageLeft("#" + b + " .canvas"); c ||= g - andflow_util.getPageTop("#" + b + " .canvas"); f = k - h; g = c - e; e = document.querySelector("#" + b + " .canvasContainer").scrollLeft - f; f = document.querySelector("#" + b + " .canvasContainer").scrollTop - g; document.querySelector("#" + b + " .canvasContainer").scrollLeft = e; document.querySelector("#" + b + " .canvasContainer").scrollTop = f
                    }
                });
        andflow_util.addEventListener(document.querySelector(".canvas"), a.dblclick_event_name, function (c) { a.event_canvas_dblclick && (a._timer_action && clearTimeout(a._timer_action), a.event_canvas_dblclick(c)) }); andflow_util.addEventListener(d.querySelector(".code_btn"), "click", function (c) {
            try {
                if (andflow_util.isVisible("#codeContainer")) {
                    if (a.editable) { var e = andflow_util.getValue("#codeContainer textarea") || "{}", f = JSON.parse(e); a.showFlow(f) } andflow_util.hide("#codeContainer"); andflow_util.removeClass("#" + b +
                        " .code_btn", "design")
                } else { var g = a.getFlow(), k = JSON.stringify(g, null, "\t"); andflow_util.setValue("#codeContainer textarea", k); andflow_util.show("#codeContainer"); andflow_util.addClass("#" + b + " .code_btn", "design") }
            } catch (h) { console.error(h) }
        }); andflow_util.addEventListener(d.querySelector(".thumbnail_btn"), "click", function (c) {
            andflow_util.getAttr("#" + b + " .thumbnail_btn", "state") == "open" ? (andflow_util.setAttr("#" + b + " .thumbnail_btn", "state", "close"), andflow_util.hide("#" + b + " .flow_thumbnail"), andflow_util.removeClass("#" +
                b + " .thumbnail_btn", "open")) : (andflow_util.setAttr("#" + b + " .thumbnail_btn", "state", "open"), andflow_util.show("#" + b + " .flow_thumbnail"), andflow_util.addClass("#" + b + " .thumbnail_btn", "open"), a._showThumbnail())
        }); andflow_util.addEventListener(d.querySelector(".flow_thumbnail_mask"), a.mousedown_event_name, function (c) {
            var e = c.pageX, f = c.pageY; andflow_util.addEventListener(d, a.mousemove_event_name, function (g) {
                var k = "#" + b + " .flow_thumbnail_mask", h = document.querySelector(k), l = h.parentElement; if (h) {
                    var m =
                        g.pageX - e; g = g.pageY - f; m < 0 && (m = 0); g < 0 && (g = 0); m + h.offsetWidth > l.offsetWidth && (m = l.offsetWidth - h.offsetWidth); g + h.offsetHeight > l.offsetHeight && (g = l.offsetHeight - h.offsetHeight); andflow_util.setStyle(k, "left", m + "px"); andflow_util.setStyle(k, "top", g + "px"); k = document.querySelector("#" + b + " .canvas").parentElement; l = k.offsetWidth / h.offsetWidth; m = h.offsetTop * l; k.scrollLeft = h.offsetLeft * l; k.scrollTop = m
                }
            })
        }); andflow_util.addEventListener(document.getElementById(b), a.mouseup_event_name, function (c) {
            c.target &&
            c.target.className && c.target.className.indexOf && c.target.className.indexOf("canvas") >= 0 && document.querySelectorAll(".canvas .focus").forEach(function (l) { andflow_util.removeClass(l, "focus") }); if (c = document.getElementById("drag_helper")) {
                var e = document.querySelector("#" + a.containerId + " .canvas"), f = c.getAttribute("p_x") || 10, g = c.getAttribute("p_y") || 10, k = c.getAttribute("page_x") || 0, h = c.getAttribute("page_y") || 0; k >= 0 && h >= 0 && (f = k - andflow_util.getPageLeft(e) - f * 1, e = h - andflow_util.getPageTop(e) - g * 1, f >= 0 &&
                    e >= 0 && a._dropComponent(a._drag_name, f, e)); andflow_util.removeElement(c)
            } andflow_util.removeEventListener(this, a.mousemove_event_name); andflow_util.setStyle("#" + a.containerId, "cursor", "default"); a._drag_name = null
        })
    }, _initTheme: function (a) { this.setTheme(a) }, _initMetadata: function () {
        var a = this, b = this.tags || [], d = this.metadata || []; b == null && (b = []); d == null && (d = []); var c = "<script>\n", e; for (e in d) c += d[e].params_script || "", c += "\n"; d = andflow_util.parseHtml(c + "\x3c/script>"); document.body.appendChild(d); if (d =
            document.querySelector("#tag_select")) { d.innerHTML = ""; c = andflow_util.parseHtml('<option value="">' + a.lang.metadata_tag_all + "</option>"); d.appendChild(c); for (e in b) c = b[e], c != null && c != "" && d.appendChild(andflow_util.parseHtml('<option value="' + c + '">' + c + "</option>")); andflow_util.addEventListener(document.getElementById("tag_select"), "change", function (f) { f = andflow_util.getValue("#tag_select"); a._showMetadata(f) }); b = andflow_util.getValue("#tag_select"); a._showMetadata(b) } else a._showMetadata("")
    }, _dropComponent: function (a,
        b, d) {
            var c = this.getMetadata(a); if (c) if (c.tp == "group") a = { id: "group_" + andflow_util.uuid().replaceAll("-", ""), name: c.name, left: b, top: d, members: [] }, this._createGroup(a); else if (c.tp == "list") a = { id: "list_" + andflow_util.uuid().replaceAll("-", ""), name: c.name, left: b, top: d, items: [] }, this._createList(a); else if (c.tp == "tip") a = { id: "tip_" + andflow_util.uuid().replaceAll("-", ""), name: c.name, left: b, top: d, content: "" }, this._createTip(a); else {
                b = { id: andflow_util.uuid().replaceAll("-", ""), left: b, top: d, name: a, params: {} };
                if (c != null) for (var e in c.params) d = c.params[e], a = d.name, (d = d.default) && (b.params[a] = d); a == "begin" && document.querySelector(".action[name='begin']") || a == "end" && document.querySelector(".action[name='end']") || (b.title = b.title || c.title, this._createAction(b))
            }
    }, _initPlumb: function () {
        var a = this; a._plumb != null && (a._plumb.destroy(), document.querySelector("#" + this.containerId + " #canvas").innerHTML = ""); var b = this._themeObj.default_link_color, d = this._themeObj.default_link_radius, c = this._themeObj.default_link_strokeWidth,
            e = this._themeObj.default_link_color_hover, f = this._themeObj.default_link_strokeWidth_hover, g = this._themeObj.default_link_outlineWidth, k = this._themeObj.default_endpoint_stroke_color, h = this._themeObj.default_endpoint_stroke_color_hover, l = this._themeObj.default_endpoint_fill_color, m = this._themeObj.default_endpoint_fill_color_hover, n = this._themeObj.default_endpoint_radius, v = this._themeObj.default_endpoint_radius_hover, q = this._themeObj.default_endpoint_strokeWidth, p = this._themeObj.default_endpoint_strokeWidth_hover,
            t = a._connectionTypes[this.flowModel.link_type || "Flowchart"].connector; t.cornerRadius = d; this._plumb = jsPlumb.getInstance({
                Endpoint: ["Dot", { radius: 5 }], Connector: t, Anchor: "Center", EndpointStyle: { stroke: k, fill: l, radius: n, strokeWidth: q }, EndpointHoverStyle: { stroke: h, fill: m, radius: v, strokeWidth: p }, PaintStyle: { stroke: b, radius: d, strokeWidth: c, outlineStroke: "transparent", outlineWidth: g }, HoverPaintStyle: { stroke: e, strokeWidth: f }, ConnectionOverlays: [["Arrow", {
                    location: 0, id: "arrow_source", length: 10, width: 10, direction: -1,
                    foldback: .8, show: !1
                }], ["Label", { label: "X", id: "label_remove", cssClass: "linkBtn", visible: !1, events: { tap: function (r, w) { a._plumb.deleteConnection(r.component) } } }], ["Label", { label: "", id: "label", cssClass: "linkLabel", visible: !1 }], ["Label", { id: "label_source", location: 20, label: "", cssClass: "linkLabelSource", visible: !1 }], ["Label", { id: "label_target", location: -20, label: "", cssClass: "linkLabelTarget", visible: !1 }], ["Arrow", { location: 1, id: "arrow_target", length: 10, width: 10, foldback: .8, show: !0 }], ["Arrow", {
                    location: .5,
                    id: "arrow_middle", length: 10, width: 10, foldback: .8, show: !1
                }], ["Diamond", { location: .5, id: "animation", length: 10, width: 10, show: !1 }]], Container: "canvas"
            }); for (var u in a._connectionTypes) a._plumb.registerConnectionType(u, a._connectionTypes[u]); this._plumb.bind("connection", function (r, w) { try { var x = r.sourceId, z = r.targetId, y = r.connection.data; y == null && (y = a._linkInfos[x + "-" + z], y == null && (y = {})); y.source_id = x; y.target_id = z; a._linkInfos[x + "-" + z] = y; a._paintConnection(r.connection, y); a._onCanvasChanged() } catch (A) { } });
        this._plumb.bind("connectionDetached", function (r) { a.delLinkInfo(r.sourceId, r.targetId); a._plumb.repaintEverything() }); this._plumb.bind("connectionMoved", function (r) { a.delLinkInfo(r.originalSourceId, r.originalTargetId); a._plumb.repaintEverything() }); this._plumb.bind("beforeDetach", function (r) { return a.editable ? !0 : !1 }); this._plumb.bind("beforeDrop", function (r) { return a.editable && a._linkInfos[r.sourceId + "-" + r.targetId] == null ? !0 : !1 }); this._plumb.bind("click", function (r, w) {
            a.editable && (w.preventDefault(),
                a.event_link_click && a.event_link_dblclick ? (a._timer_link && clearTimeout(a._timer_link), a._timer_link = setTimeout(function () { var x = a.getLinkInfo(r.sourceId, r.targetId); a.event_link_click(x) }, 300)) : a.event_link_click && (w = a.getLinkInfo(r.sourceId, r.targetId), a.event_link_click(w)))
        }); this._plumb.bind("dblclick", function (r, w) { w.preventDefault(); a.editable && a.event_link_dblclick && (a._timer_link && clearTimeout(a._timer_link), r = a.getLinkInfo(r.sourceId, r.targetId), a.event_link_dblclick(r)) })
    }, _showMetadata: function (a) {
        var b =
            this, d = this.metadata, c = {}, e; for (e in d) if (!(a && a.length > 0 && d[e].tag && d[e].tag.length > 0 && d[e].tag != a)) { var f = d[e].group || "\u901a\u7528"; c[f] == null && (c[f] = []); c[f].push(d[e]) } document.getElementById("actionMenu").innerHTML = ""; a = 0; for (var g in c) {
                a > 0 && document.getElementById("actionMenu").appendChild(andflow_util.parseHtml('<li class="actionMenuSpliter"  ></li>')); d = '<li class="actionMenuGroup"  ><a href="#" class="group-title"><span class="group-label">' + g + "</span></a></li>"; document.getElementById("actionMenu").appendChild(andflow_util.parseHtml(d));
                d = c[g]; for (e in d) { f = d[e].name; var k = d[e].title, h = d[e].icon || "img/node.png", l = ""; h && h.length > 0 && (l = '<img src="' + (b.img_path || "") + h + '" draggable="false" />'); f = '<li id="' + f + '"  action_name="' + f + '" action_title="' + k + '" class="actionMenuItem"  action_icon="' + h + '" ><a class="item-title">' + l + '<span class="item-label">' + k + "</span></a></li>"; document.getElementById("actionMenu").appendChild(andflow_util.parseHtml(f)) } a++
            } document.querySelectorAll("#actionMenu .actionMenuItem").forEach(function (m, n) {
                andflow_util.addEventListener(m,
                    b.mousedown_event_name, function (v) {
                        andflow_util.isVisible("#codeContainer") || (v = this.getAttribute("action_name"), b._drag_name = v, andflow_util.addEventListener(document.querySelector("#" + b.containerId + " .andflow"), b.mousemove_event_name, function (q) {
                            if (b._drag_name != null) {
                                var p = document.querySelector("#" + b.containerId + " .andflow"), t = document.getElementById("drag_helper"); if (!t) { t = b._createHelper(b._drag_name); if (t == null) return; p.appendChild(t) } var u = t.offsetWidth / 2 || 10, r = t.offsetHeight / 2 || 10, w = q.targetTouches ?
                                    q.targetTouches[0].pageX : q.pageX; q = q.targetTouches ? q.targetTouches[0].pageY : q.pageY; var x = w - andflow_util.getPageLeft(p) - u; p = q - andflow_util.getPageTop(p) - r; t.style.left = x + "px"; t.style.top = p + "px"; t.setAttribute("p_x", u); t.setAttribute("p_y", r); t.setAttribute("page_x", w); t.setAttribute("page_y", q)
                            }
                        }))
                    })
            })
    }, _createHelper: function (a) {
        if (a != null) {
            var b = this.getMetadata(a); if (b != null) {
                var d = b.icon, c = b.title, e = '<div class="action-drag"></div>'; a = '<div class="action-drag-main" ><div class="action-header">' +
                    c + '</div><div class="action-icon"><img src="' + (this.img_path || "") + d + '"  draggable="false"/></div></div>'; b.tp == "group" ? (e = '<div class="group-drag"></div>', a = '<div class="group-drag-main"><div class="group-header">' + c + '</div><div class="group-body"></div></div>') : b.tp == "list" ? (e = '<div class="list-drag"></div>', a = '<div class="list-drag-main"><div class="list-header">' + c + '</div><div class="list-body"></div></div>') : b.tp == "tip" ? (e = '<div class="tip-drag"></div>', a = '<div class="tip-drag-main"><div class="tip-header"></div><div class="tip-body">' +
                        c + "</div></div>") : (e = '<div class="action-drag"></div>', a = '<div class="action-drag-main" ><div class="action-header">' + c + '</div><div class="action-icon"><img src="' + (this.img_path || "") + d + '" draggable="false"/></div></div>'); if (d = b.render_helper || b.render || this.render_action_helper) b = d(b), b != null && b.length > 0 && (a = b); e = andflow_util.parseHtml(e); a = andflow_util.parseHtml(a); e.appendChild(a); e.setAttribute("id", "drag_helper"); e.style.position = "absolute"; e.querySelectorAll("img").forEach(f => {
                            f.setAttribute("draggable",
                                "false")
                        }); return e
            }
        }
    }, _createGroup: function (a) {
        var b = this, d = a.id, c = a.name; if (d != null && c != null) {
            var e = a.members || []; c = this.getMetadata(c) || {}; var f = document.getElementById(a.id); if (!f) {
                f = andflow_util.parseHtml('<div id="' + a.id + '" class="group group-container" > </div>'); var g = '<div class="group-main group-master"><div class="group-header"></div><div class="group-body"></div></div>'; if (a.render) { var k = a.render(c, a, g); k && k.length > 0 && (g = k) } else c.render && (k = c.render(c, a, g)) && k.length > 0 && (g = k); g = andflow_util.parseHtml(g);
                g.appendChild(andflow_util.parseHtml('<div class="group-remove-btn">X</div>')); g.appendChild(andflow_util.parseHtml('<div class="group-resize"></div>')); k = '<div class="group-ep" title="\u62d6\u62c9\u8fde\u7ebf">\u2192</div>'; b.render_endpoint && (c = b.render_endpoint(c, a, k)) && c.length > 0 && (k = c); c = andflow_util.parseHtml(k); andflow_util.addClass(c, "group-ep"); g.appendChild(c); f.appendChild(g); document.querySelector("#" + b.containerId + " #canvas").appendChild(f)
            } b.setGroupInfo(a); b._plumb.addGroup({
                el: f, id: a.id,
                orphan: !0, droppable: !0, dropOverride: !0, revert: !0, endpoint: ["Dot", { radius: 3 }], dragOptions: { start: function (l) { }, drag: function (l) { l.pos[0] < 0 && (l.pos[0] = 0, andflow_util.setStyle(l.el, "left", "0px")); l.pos[1] < 0 && (l.pos[1] = 0, andflow_util.setStyle(l.el, "top", "0px")) }, stop: function (l) { if (b.drag_step > 1) { var m = Math.round(l.pos[1] / b.drag_step) * b.drag_step; andflow_util.setStyle(l.el, "left", Math.round(l.pos[0] / b.drag_step) * b.drag_step + "px"); andflow_util.setStyle(l.el, "top", m + "px") } } }
            }); b._plumb.makeSource(f, {
                filter: ".group-ep",
                anchor: "Continuous", extract: { action: "the-action" }
            }); b._plumb.makeTarget(f, { dropOptions: { hoverClass: "dragHover" }, anchor: "Continuous", allowLoopback: !0 }); if (e && e.length > 0) { a = []; for (var h in e) a.push(document.getElementById(e[h])); b._plumb.addToGroup(d, a) } andflow_util.addEventListener(f, b.mouseup_event_name, function (l) {
                b.editable && b.isMobile && (document.querySelectorAll(".canvas .group.focus").forEach(function (m, n) { andflow_util.removeClass(m, "focus") }), andflow_util.addClass(f, "focus")); b._onCanvasChanged();
                l.preventDefault()
            }); andflow_util.addEventListener(f.querySelector(".group-remove-btn"), b.click_event_name, function () { andflow_util.confirm("\u786e\u5b9a\u5220\u9664\u5206\u7ec4?", function () { b.removeGroup(d) }) }); andflow_util.addEventListener(f.querySelector(".group-header"), b.dblclick_event_name, function (l) {
                if (b.editable && (l.preventDefault(), !f.querySelector(".content_editor"))) {
                    var m = andflow_util.parseHtml('<input class="content_editor" style="resize: none;border:none;outline: none;"  />'); andflow_util.setStyle(m,
                        "position", "absolute"); andflow_util.setStyle(m, "z-index", "10"); andflow_util.setStyle(m, "left", "0px"); andflow_util.setStyle(m, "top", "0px"); andflow_util.setStyle(m, "width", "100%"); andflow_util.setStyle(m, "height", "100%"); andflow_util.setStyle(m, "box-sizing", "border-box"); andflow_util.setValue(m, f.querySelector(".group-header").innerHTML); f.querySelector(".group-header").appendChild(m); m.focus(); andflow_util.addEventListener(m, "blur", function (n) {
                            n = n.target.value; m.parentElement.innerHTML = n; b._groupInfos[d].title =
                                n; andflow_util.removeElement(m)
                        }); andflow_util.addEventListener(m, "keydown", function (n) { n.code == "Enter" && (n = andflow_util.getValue(m), m.parentElement.innerHtml = n, b._groupInfos[d].title = n, andflow_util.removeElement(m)) })
                }
            }); andflow_util.addEventListener(f.querySelector(".group-body"), b.dblclick_event_name, function (l) {
                if (b.editable && (l.preventDefault(), !f.querySelector(".content_editor"))) {
                    var m = andflow_util.parseHtml('<textarea class="content_editor" style="resize: none;border:none;outline: none;"></textarea>');
                    andflow_util.setStyle(m, "position", "absolute"); andflow_util.setStyle(m, "z-index", "10"); andflow_util.setStyle(m, "left", "0px"); andflow_util.setStyle(m, "top", "0px"); andflow_util.setStyle(m, "width", "100%"); andflow_util.setStyle(m, "height", "100%"); andflow_util.setStyle(m, "box-sizing", "border-box"); andflow_util.setValue(m, b._groupInfos[d].des || ""); f.querySelector(".group-body").appendChild(m); m.focus(); andflow_util.addEventListener(m, "blur", function (n) {
                        n = n.target.value; b._groupInfos[d].des = n; n = n.replaceAll("\n",
                            "<br/>"); m.parentElement.innerHTML = n; andflow_util.removeElement(m)
                    })
                }
            }); andflow_util.addEventListener(f.querySelector(".group-resize"), b.mousedown_event_name, function (l) {
                var m = document.querySelector("#" + b.containerId); m.style.cursor = "nwse-resize"; var n = f.querySelector(".group-master"), v = l.targetTouches ? l.targetTouches[0].pageX : l.pageX, q = l.targetTouches ? l.targetTouches[0].pageY : l.pageY, p = n.offsetWidth, t = n.offsetHeight; andflow_util.addEventListener(m, b.mousemove_event_name, function (u) {
                    var r = p + ((u.targetTouches ?
                        u.targetTouches[0].pageX : u.pageX) - v), w = t + ((u.targetTouches ? u.targetTouches[0].pageY : u.pageY) - q); andflow_util.setStyle(n, "width", r + "px"); andflow_util.setStyle(n, "height", w + "px"); andflow_util.setAttr(f, "width", r); andflow_util.setAttr(f, "height", w); b._plumb.repaintEverything(); b._onCanvasChanged(); u.preventDefault()
                }); l.preventDefault()
            }); b._onCanvasChanged()
        }
    }, _createList: function (a) {
        var b = this, d = a.id; if (d != null) {
            this.getMetadata(name); var c = document.querySelector("#" + b.containerId + " #" + a.id); c || (c =
                andflow_util.parseHtml('<div id="' + a.id + '" class="list list-container"><div class="list-remove-btn">X</div><div class="list-resize"></div><div class="list-main"><div class="list-header"></div><div class="list-body"></div></div></div>'), document.querySelector("#" + b.containerId + " #canvas").appendChild(c)); b.setListInfo(a); andflow_util.addEventListener(c, b.mouseup_event_name, function () {
                    b.editable && b.isMobile && (document.querySelectorAll(".focus").forEach(function (f) { andflow_util.removeClass(f, "focus") }),
                        andflow_util.addClass(c, "focus")); b._onCanvasChanged()
                }); andflow_util.addEventListener(c.querySelector(".list-remove-btn"), b.click_event_name, function () { andflow_util.confirm("\u786e\u5b9a\u5220\u9664?", function () { b.removeList(d) }) }); var e = c.querySelector(".list-main"); andflow_util.addEventListener(c.querySelector(".list-resize"), b.mousedown_event_name, function (f) {
                    var g = document.getElementById(b.containerId); g.style.cursor = "nwse-resize"; var k = f.targetTouches ? f.targetTouches[0].pageX : f.pageX, h = f.targetTouches ?
                        f.targetTouches[0].pageY : f.pageY, l = e.offsetWidth, m = e.offsetHeight; andflow_util.addEventListener(g, b.mousemove_event_name, function (n) { var v = l + ((n.targetTouches ? n.targetTouches[0].pageX : n.pageX) - k), q = m + ((n.targetTouches ? n.targetTouches[0].pageY : n.pageY) - h); andflow_util.setStyle(e, "width", v + "px"); andflow_util.setStyle(e, "height", q + "px"); andflow_util.setAttr(c, "width", v); andflow_util.setAttr(c, "height", q); b._plumb.repaintEverything(); b._onCanvasChanged(); n.preventDefault() }); f.preventDefault()
                }); andflow_util.addEventListener(c.querySelector(".list-header"),
                    b.dblclick_event_name, function (f) {
                        if (b.editable && (f.preventDefault(), !c.querySelector(".content_editor"))) {
                            var g = andflow_util.parseHtml('<input class="content_editor" style="resize: none;border:none;outline: none;" />'); andflow_util.setStyle(g, "position", "absolute"); andflow_util.setStyle(g, "z-index", "10"); andflow_util.setStyle(g, "left", "0px"); andflow_util.setStyle(g, "top", "0px"); andflow_util.setStyle(g, "width", "100%"); andflow_util.setStyle(g, "height", "100%"); andflow_util.setStyle(g, "box-sizing", "border-box");
                            andflow_util.setValue(g, c.querySelector(".list-header").innerHTML); c.querySelector(".list-header").appendChild(g); g.focus(); andflow_util.addEventListener(g, "blur", function (k) { k = k.target.value; g.parentElement.innerHTML = k; b._listInfos[d].title = k; andflow_util.removeElement(g); b._onCanvasChanged() }); andflow_util.addEventListener(g, "keydown", function (k) { k.code == "Enter" && (k = andflow_util.getValue(g), g.parentElement.innerHTML = k, b._listInfos[d].title = k, andflow_util.removeElement(g), b._onCanvasChanged()) })
                        }
                    });
            andflow_util.addEventListener(c.querySelector(".list-body"), b.dblclick_event_name, function (f) {
                if (b.editable && (f.preventDefault(), !c.querySelector(".content_editor"))) {
                    f = andflow_util.parseHtml('<textarea class="content_editor" style="resize: none;border:none;outline: none;"></textarea>'); andflow_util.addClass(f, "content_editor"); andflow_util.setStyle(f, "position", "absolute"); andflow_util.setStyle(f, "z-index", "10"); andflow_util.setStyle(f, "left", "0px"); andflow_util.setStyle(f, "top", "0px"); andflow_util.setStyle(f,
                        "width", "100%"); andflow_util.setStyle(f, "height", "100%"); andflow_util.setStyle(f, "box-sizing", "border-box"); var g = b._listInfos[d].items, k = ""; if (g && g.length > 0) for (var h in g) k += g[h].title + "\n"; andflow_util.setValue(f, k); c.querySelector(".list-body").appendChild(f); f.focus(); andflow_util.addEventListener(f, "blur", function (l) {
                            l = l.target.value.split("\n"); var m = [], n; for (n in l) { var v = "list_item_" + d + "_" + n, q = l[n]; q != null && q.trim() != "" && m.push({ id: v, title: l[n] }) } b.setListItems(d, m); b._onCanvasChanged();
                            andflow_util.removeElement(this)
                        })
                }
            }); b._plumb.draggable(c, { start: function (f) { }, drag: function (f) { f.pos[0] < 0 && (f.pos[0] = 0, andflow_util.setStyle(f.el, "left", "0px")); f.pos[1] < 0 && (f.pos[1] = 0, andflow_util.setStyle(f.el, "top", "0px")) }, stop: function (f) { if (b.drag_step > 1) { var g = Math.round(f.pos[1] / b.drag_step) * b.drag_step; andflow_util.setStyle(f.el, "left", Math.round(f.pos[0] / b.drag_step) * b.drag_step + "px"); andflow_util.setStyle(f.el, "top", g + "px") } } }); b._plumb.addList(c, { endpoint: ["Rectangle", { width: 20, height: 20 }] });
            b._onCanvasChanged()
        }
    }, _setListItems: function (a, b) {
        var d = a; typeof a === "string" && (d = document.getElementById(a)); if (d) {
            if (d.querySelector(".list-item")) { var c = []; d.querySelectorAll(".list-item").forEach(function (h, l) { l = h.id; let m = !1; for (var n in b) l == b[n].id && (m = !0); m || c.push(h) }); for (var e in c) a = c[e].id, this.removeLinkBySource(a), this.removeLinkByTarget(a), this._plumb.remove(c[e]), andflow_util.removeElement(c[e]) } for (e in b) if (a = b[e], a.id != null && a.title != null && a.title != "") {
                var f = a.id, g = document.getElementById(f);
                g || (g = andflow_util.parseHtml('<div id="' + f + '" class="list-item"><div class="list-item-title"></div></div>'), d.querySelector(".list-body").appendChild(g), this._plumb.makeSource(g, { allowLoopback: !1, anchor: ["Left", "Right"] }), this._plumb.makeTarget(g, { allowLoopback: !1, anchor: ["Left", "Right"] })); g.querySelector(".list-item-title").innerHTML = a.title || ""; a.item_color && andflow_util.setStyle(g, "background-color", a.item_color); a.item_text_color && andflow_util.setStyle(g.querySelector(".list-item-title"), "color",
                    a.item_text_color); if (a.style) for (var k in a.style) andflow_util.setStyle(g, k, a.style[k])
            }
        }
    }, _deleteListItem: function (a, b) { for (var d in this._listInfos[a].items) this._listInfos[a].items[d].id == b && (this._listInfos[a].items[d] = null) }, _getBase64Image: function (a) { try { var b = document.createElement("canvas"); b.width = a.width; b.height = a.height; b.getContext("2d").drawImage(a, 0, 0, a.width, a.height); return b.toDataURL("image/png") } catch (d) { return null } }, _createAction: function (a) {
        const b = this, d = a.id; if (d != null) {
            var c =
                a.name; if (c != null) {
                    var e = this.getMetadata(c) || {}, f = document.getElementById(a.id); if (!f) {
                        f = andflow_util.parseHtml('<div id="' + d + '"  draggable="true" ondragend="" class="action-container" ><div  class="action" ></div></div>'); var g = '<div class="action-main action-master" ><div class="action-icon" ><img src=""  ></div><div class="action-header" ></div><div class="action-body"  ><div class="action-content"  ></div><div class="body-resize"></div></div></div>'; var k = a.render || e.render || b.render_action;
                        k && (k = k(e, a, g)) && k.length > 0 && (g = k); g = andflow_util.parseHtml(g); andflow_util.addClass(g, "action-master"); f.querySelector(".action").appendChild(g); g = '<div class="ep" title="\u62d6\u62c9\u8fde\u7ebf">\u2192</div>'; b.render_endpoint && (k = b.render_endpoint(e, a, g)) && k.length > 0 && (g = k); g = andflow_util.parseHtml(g); andflow_util.addClass(g, "ep"); f.querySelector(".action").appendChild(g); g = '<div class="action-resize"></div>'; b.render_btn_resize && (k = b.render_btn_resize(e, a, g)) && k.length > 0 && (g = k); g = andflow_util.parseHtml(g);
                        andflow_util.addClass(g, "action-resize"); f.querySelector(".action").appendChild(g); g = '<a href="javascript:void(0)" class="action-remove-btn"  >X</a>'; b.render_btn_remove && (k = b.render_btn_remove(e, a, g)) && k.length > 0 && (g = k); g = andflow_util.parseHtml(g); andflow_util.addClass(g, "action-remove-btn"); f.querySelector(".action").appendChild(g); document.querySelector("#" + b.containerId + " #canvas").appendChild(f)
                    } f.id = d; this.setActionInfo(a); andflow_util.addEventListener(f.querySelector(".action-icon img"), "load",
                        function () { if (andflow_util.getAttr(this, "src").indexOf("data:image/") < 0) { var h = b._getBase64Image(this); h != null && (this.src = h) } }); andflow_util.addEventListener(f, b.mouseup_event_name, function () { b._onCanvasChanged() }); andflow_util.addEventListener(f.querySelector(".action-remove-btn"), b.click_event_name, function () { andflow_util.confirm("\u786e\u5b9a\u5220\u9664\u8be5\u8282\u70b9?", function () { b.removeAction(d) }) }); andflow_util.addEventListener(f, b.mousedown_event_name, function (h) {
                            andflow_util.setAttr(f,
                                "mousedown", "true"); andflow_util.setAttr(f, "mousedown_time", (new Date).getTime())
                        }); andflow_util.addEventListener(f, b.mouseup_event_name, function (h) {
                            andflow_util.setAttr(f, "mousedown", "false"); b.editable && b.isMobile && (document.querySelectorAll(".canvas .focus").forEach(function (m, n) { andflow_util.removeClass(m, "focus") }), andflow_util.addClass(f.querySelector(".action"), "focus")); if (b.editable) {
                                var l = b.getAction(d); b.event_action_click && (b.event_action_dblclick ? (b._timer_action && clearTimeout(b._timer_action),
                                    b._timer_action = setTimeout(function () { b.event_action_click(e, l) }, 300)) : b.event_action_click(e, l))
                            } h.preventDefault()
                        }); andflow_util.addEventListener(f, b.dblclick_event_name, function (h) { if (b.editable && b.event_action_dblclick) { b._timer_action && clearTimeout(b._timer_action); var l = b.getAction(d); b.event_action_dblclick(e, l) } h.preventDefault() }); andflow_util.addEventListener(f.querySelector(".action-resize"), b.mousedown_event_name, function (h) {
                            var l = document.getElementById(b.containerId); l.style.cursor =
                                "nwse-resize"; var m = h.targetTouches ? h.targetTouches[0].pageX : h.pageX, n = h.targetTouches ? h.targetTouches[0].pageY : h.pageY, v = f.querySelector(".action-master").offsetWidth, q = f.querySelector(".action-master").offsetHeight; andflow_util.addEventListener(l, b.mousemove_event_name, function (p) {
                                    var t = v + ((p.targetTouches ? p.targetTouches[0].pageX : p.pageX) - m); p = q + ((p.targetTouches ? p.targetTouches[0].pageY : p.pageY) - n); var u = andflow_util.getStyle(f.querySelector(".action-master"), "min-width") || "0", r = andflow_util.getStyle(f.querySelector(".action-master"),
                                        "min-height") || "0"; u = u.replace("px", "") * 1; r = r.replace("px", "") * 1; if (u == null || t > u) andflow_util.setStyle(f.querySelector(".action-master"), "width", t + "px"), andflow_util.setStyle(f.querySelector(".action"), "width", t + "px"); if (r == null || p > r) andflow_util.setStyle(f.querySelector(".action-master"), "height", p + "px"), andflow_util.setStyle(f.querySelector(".action"), "height", p + "px"); t = b._actionCharts[d]; t != null && (p = document.getElementById("chart_" + d), r = p.parentElement.offsetHeight, andflow_util.setStyle(p, "width",
                                            p.parentElement.offsetWidth + "px"), andflow_util.setStyle(p, "height", r + "px"), t.resize()); b._plumb.repaintEverything(); b._onCanvasChanged(); h.preventDefault()
                                }); h.preventDefault()
                        }); andflow_util.addEventListener(f.querySelector(".body-resize"), b.mousedown_event_name, function (h) {
                            var l = document.getElementById(b.containerId); l.style.cursor = "nwse-resize"; var m = h.targetTouches ? h.targetTouches[0].pageX : h.pageX, n = h.targetTouches ? h.targetTouches[0].pageY : h.pageY, v = f.querySelector(".action-body").offsetWidth,
                                q = f.querySelector(".action-body").offsetHeight; andflow_util.addEventListener(l, b.mousemove_event_name, function (p) {
                                    var t = v + ((p.targetTouches ? p.targetTouches[0].pageX : p.pageX) - m), u = q + ((p.targetTouches ? p.targetTouches[0].pageY : p.pageY) - n); andflow_util.setStyle(f.querySelector(".action-body"), "width", t + "px"); andflow_util.setStyle(f.querySelector(".action-body"), "height", u + "px"); andflow_util.setAttr(f, "body_width", t); andflow_util.setAttr(f, "body_height", u); t = b._actionCharts[d]; if (t != null) {
                                        u = document.getElementById("chart_" +
                                            d); var r = u.parentElement.offsetHeight; andflow_util.setStyle(u, "width", u.parentElement.offsetWidth + "px"); andflow_util.setStyle(u, "height", r + "px"); t.resize()
                                    } b._plumb.repaintEverything(); b._onCanvasChanged(); p.preventDefault()
                                }); h.preventDefault()
                        }); this._showActionNode(f, c); b._onCanvasChanged()
                }
        }
    }, _showActionNode: function (a, b) {
        var d = this; d._plumb.draggable(a, {
            start: function (c) { }, drag: function (c) {
                c.pos[0] < 0 && (c.pos[0] = 0, andflow_util.setStyle(c.el, "left", "0px")); c.pos[1] < 0 && (c.pos[1] = 0, andflow_util.setStyle(c.el,
                    "top", "0px"))
            }, stop: function (c) { if (d.drag_step > 1) { var e = Math.round(c.pos[1] / d.drag_step) * d.drag_step; andflow_util.setStyle(c.el, "left", Math.round(c.pos[0] / d.drag_step) * d.drag_step + "px"); andflow_util.setStyle(c.el, "top", e + "px") } }
        }); b != null && b == "end" || d._plumb.makeSource(a, { filter: ".ep", anchor: "Continuous", extract: { action: "the-action" }, maxConnections: 20, onMaxConnections: function (c, e) { showWarning("\u5df2\u7ecf\u8fbe\u5230\u8fde\u63a5\u6700\u5927\u6570 (" + c.maxConnections + ") ") } }); b != null && b == "begin" ||
            d._plumb.makeTarget(a, { dropOptions: { hoverClass: "dragHover" }, anchor: "Continuous", allowLoopback: !0 })
    }, _createTip: function (a) {
        var b = this; const d = a.id; if (d != null) {
            var c = this.getMetadata(a.name) || {}, e = document.querySelector("#" + this.containerId + " #" + a.id); if (!e) {
                e = andflow_util.parseHtml('<div id="' + a.id + '" class="tip tip-container"><div class="tip-remove-btn">X</div><div class="tip-resize"></div></div>'); var f = '<div class="tip-main"><div class="tip-header"></div><div class="tip-body"></div></div>'; if (a.render) {
                    var g =
                        a.render(c, a, f); g && g.length > 0 && (f = g)
                } else c.render ? (g = c.render(c, a, f)) && g.length > 0 && (f = g) : b.render_tip && (g = b.render_tip(c, a, f)) && g.length > 0 && (f = g); f = andflow_util.parseHtml(f); andflow_util.addClass(f, "tip-master"); e.appendChild(f); f = '<div class="tip-ep" title="\u62d6\u62c9\u8fde\u7ebf">\u2192</div>'; b.render_endpoint && (c = b.render_endpoint(c, a, f)) && c.length > 0 && (f = c); c = andflow_util.parseHtml(f); andflow_util.addClass(c, "tip-ep"); e.appendChild(c); document.getElementById("canvas").appendChild(e)
            } b.setTipInfo(a);
            b._plumb.getContainer().appendChild(e); b._plumb.draggable(e, { start: function (k) { }, drag: function (k) { k.pos[0] < 0 && (k.pos[0] = 0, andflow_util.setStyle(k.el, "left", "0px")); k.pos[1] < 0 && (k.pos[1] = 0, andflow_util.setStyle(k.el, "top", "0px")) }, stop: function (k) { if (b.drag_step > 1) { var h = Math.round(k.pos[1] / b.drag_step) * b.drag_step; andflow_util.setStyle(k.el, "left", Math.round(k.pos[0] / b.drag_step) * b.drag_step + "px"); andflow_util.setStyle(k.el, "top", h + "px") } } }); b._plumb.makeSource(e, { filter: ".tip-ep", anchor: "Continuous" });
            b._plumb.makeTarget(e, { dropOptions: { hoverClass: "dragHover" }, anchor: "Continuous", allowLoopback: !0 }); andflow_util.addEventListener(e, b.mouseup_event_name, function () { b.editable && b.isMobile && (document.querySelectorAll(".focus").forEach(function (k) { andflow_util.removeClass(k, "focus") }), andflow_util.addClass(e, "focus")); b._onCanvasChanged() }); andflow_util.addEventListener(e.querySelector(".tip-remove-btn"), b.click_event_name, function () { andflow_util.confirm("\u786e\u5b9a\u5220\u9664?", function () { b.removeTip(d) }) });
            andflow_util.addEventListener(e.querySelector(".tip-header"), b.dblclick_event_name, function (k) {
                if (b.editable && !e.querySelector(".content_editor")) {
                    var h = andflow_util.parseHtml('<input class="content_editor" style="resize:none;border: none;outline: none;" />'); andflow_util.setStyle(h, "position", "absolute"); andflow_util.setStyle(h, "z-index", "10"); andflow_util.setStyle(h, "left", "0px"); andflow_util.setStyle(h, "top", "0px"); andflow_util.setStyle(h, "width", "100%"); andflow_util.setStyle(h, "height", "100%");
                    andflow_util.setStyle(h, "box-sizing", "border-box"); andflow_util.setValue(h, e.querySelector(".tip-header").innerHTML); e.querySelector(".tip-header").appendChild(h); h.focus(); andflow_util.addEventListener(h, "blur", function (l) { l = l.target.value; h.parentElement.innerHTML = l; b._tipInfos[d].title = l; b._onCanvasChanged(); andflow_util.removeElement(h) }); andflow_util.addEventListener(h, "keydown", function (l) {
                        l.code == "Enter" && (l = l.target.value, h.parentElement.innerHtml = l, b._tipInfos[d].title = l, b._onCanvasChanged(),
                            andflow_util.removeElement(h))
                    })
                }
            }); andflow_util.addEventListener(e.querySelector(".tip-body"), b.dblclick_event_name, function (k) {
                if (b.editable && !e.querySelector(".content_editor")) {
                    var h = andflow_util.parseHtml('<textarea class="content_editor"  style="resize:none;border: none;outline: none;"></textarea>'); andflow_util.setStyle(h, "position", "absolute"); andflow_util.setStyle(h, "z-index", "10"); andflow_util.setStyle(h, "left", "0px"); andflow_util.setStyle(h, "top", "0px"); andflow_util.setStyle(h, "width",
                        "100%"); andflow_util.setStyle(h, "height", "100%"); andflow_util.setStyle(h, "box-sizing", "border-box"); andflow_util.setValue(h, b._tipInfos[d].content); e.querySelector(".tip-body").appendChild(h); h.focus(); andflow_util.addEventListener(h, "blur", function (l) { l = l.target.value; b._tipInfos[d].content = l; l = l.replaceAll("\n", "<br/>"); h.parentElement.innerHTML = l; b._onCanvasChanged(); andflow_util.removeElement(h) })
                }
            }); andflow_util.addEventListener(e.querySelector(".tip-resize"), b.mousedown_event_name, function (k) {
                var h =
                    document.getElementById(b.containerId); h.style.cursor = "nwse-resize"; var l = e.querySelector(".tip-master"), m = k.targetTouches ? k.targetTouches[0].pageX : k.pageX, n = k.targetTouches ? k.targetTouches[0].pageY : k.pageY, v = l.offsetWidth, q = l.offsetHeight; andflow_util.addEventListener(h, b.mousemove_event_name, function (p) {
                        var t = v + ((p.targetTouches ? p.targetTouches[0].pageX : p.pageX) - m), u = q + ((p.targetTouches ? p.targetTouches[0].pageY : p.pageY) - n); andflow_util.setStyle(l, "width", t + "px"); andflow_util.setStyle(l, "height",
                            u + "px"); andflow_util.setAttr(e, "width", t); andflow_util.setAttr(e, "height", u); b._plumb.repaintEverything(); b._onCanvasChanged(); p.preventDefault()
                    }); k.preventDefault()
            })
        }
    }, _showThumbnailImage: function () {
        const a = document.getElementById("canvas"), b = a.scrollWidth, d = a.scrollHeight; var c = document.createElement("canvas"); c.width = b; c.height = d; document.body.append(c); try {
            if (c.getContext) {
                var e = c.getContext("2d"); e.fillStyle = "#CCCCCC"; a.querySelectorAll(".action-container").forEach(function (g, k) {
                    k = andflow_util.getLeftInCanvas(g);
                    var h = andflow_util.getTopInCanvas(g); e.fillRect(k, h, g.offsetWidth, g.offsetHeight)
                }); e.fillStyle = "#CCCCCC"; a.querySelectorAll(".tip-container").forEach(function (g, k) { k = andflow_util.getLeftInCanvas(g); var h = andflow_util.getTopInCanvas(g); e.fillRect(k, h, g.offsetWidth, g.offsetHeight) }); e.fillStyle = "#CCCCCC"; a.querySelectorAll(".list-container").forEach(function (g, k) { k = andflow_util.getLeftInCanvas(g); var h = andflow_util.getTopInCanvas(g); e.fillRect(k, h, g.offsetWidth, g.offsetHeight) }); e.lineWidth = "3"; e.strokeStyle =
                    "#CCCCCC"; e.beginPath(); a.querySelectorAll(".group-container").forEach(function (g, k) { k = andflow_util.getLeftInCanvas(g); var h = andflow_util.getTopInCanvas(g); e.rect(k, h, g.offsetWidth, g.offsetHeight) }); e.stroke()
            } var f = c.toDataURL("image/png", .3); andflow_util.setStyle(document.getElementById(this.containerId).querySelector(".flow_thumbnail"), "background-image", "url(" + f + ")")
        } finally { andflow_util.removeElement(c) }
    }, _showThumbnail: function () {
        if (andflow_util.isVisible("#" + this.containerId + " .flow_thumbnail")) {
            var a =
                document.getElementById(this.containerId).querySelector(".canvas"), b = a.parentElement, d = document.getElementById(this.containerId).querySelector(".flow_thumbnail"), c = document.getElementById(this.containerId).querySelector(".flow_thumbnail_mask"), e = a.offsetWidth, f = a.offsetHeight; a = b.offsetWidth; var g = b.offsetHeight, k = .2 * e; e = k * 1 / e; andflow_util.setStyle(d, "width", k + "px"); andflow_util.setStyle(d, "height", e * f + "px"); d = g * e + "px"; f = b.scrollLeft * e + "px"; b = b.scrollTop * e + "px"; andflow_util.setStyle(c, "width", a * e +
                    "px"); andflow_util.setStyle(c, "height", d); andflow_util.setStyle(c, "left", f); andflow_util.setStyle(c, "top", b); this._showThumbnailImage()
        }
    }, _resizeCanvas: function () { var a = 0, b = 0, d = document.getElementById(this.containerId).querySelector(".canvas"); d.querySelectorAll("div").forEach(function (c, e) { e = c.offsetLeft; let f = c.offsetWidth, g = c.offsetTop; c = c.offsetHeight; e + f > a && (a = e + f); g + c > b && (b = g + c) }); andflow_util.setStyle(d, "width", a + "px"); andflow_util.setStyle(d, "height", b + "px") }, _onCanvasChanged: function () {
        var a =
            this; setTimeout(function () { a._resizeCanvas(); a.event_canvas_changed && a.event_canvas_changed(); a._showThumbnail() }, 10)
    }, _formateDateTime: function (a) { if (a.indexOf("0001") == 0) return ""; var b = a, d = a.indexOf("+"); d >= 0 && (b = b.substr(0, d)); d = a.indexOf("."); d >= 0 && (b = b.substr(0, d)); d = a.indexOf("Z"); d >= 0 && (b = b.substr(0, d)); return b = b.replace("T", " ") }, _isGroup: function (a) { var b = this._plumb.getGroups(), d; for (d in b) if (b[d].id == a) return !0; return !1 }, _paintConnection: function (a, b) {
        b == null && (b = {}); var d = b.link_type ||
            this.flowModel.link_type || "Flowchart", c = b.source_id.indexOf("tip_") >= 0 || b.target_id.indexOf("tip_") >= 0, e = this._isGroup(b.source_id) || this._isGroup(b.target_id), f = b.source_id.indexOf("list_") >= 0 || b.target_id.indexOf("list_") >= 0, g = b.lineStyle || "solid", k = b.active || "true", h = b.hoverPaintStyle, l = { stroke: this._themeObj.default_link_color, radius: this._themeObj.default_link_radius, strokeWidth: this._themeObj.default_link_strokeWidth, outlineStroke: "transparent", outlineWidth: this._themeObj.default_link_outlineWidth };
        l = andflow_util.extend(l, b.paintStyle); var m = { stroke: this._themeObj.default_link_color_hover, radius: this._themeObj.default_link_radius_hover, strokeWidth: this._themeObj.default_link_strokeWidth_hover, outlineStroke: "transparent", outlineWidth: this._themeObj.default_link_outlineWidth_hover }; m = andflow_util.extend(m, h); g == "dotted" || k != null && k == "false" ? (l.dashstyle = "2 1", m.dashstyle = "2 1") : (l.dashstyle = "1 0", m.dashstyle = "1 0"); c ? (l.stroke = this._themeObj.default_link_color_t, l.radius = this._themeObj.default_link_radius_t,
            l.strokeWidth = this._themeObj.default_link_strokeWidth_t, l.outlineStroke = "transparent", l.outlineWidth = this._themeObj.default_link_outlineWidth_t, m.stroke = this._themeObj.default_link_color_t_hover, m.radius = this._themeObj.default_link_radius_t_hover, m.strokeWidth = this._themeObj.default_link_strokeWidth_t_hover, m.outlineStroke = "transparent", m.outlineWidth = this._themeObj.default_link_outlineWidth_t_hover, l.dashstyle = "5 3", m.dashstyle = "5 3") : e && (l.stroke = this._themeObj.default_link_color_g, l.radius = this._themeObj.default_link_radius_g,
                l.strokeWidth = this._themeObj.default_link_strokeWidth_g, l.outlineStroke = "transparent", l.outlineWidth = this._themeObj.default_link_outlineWidth_g, m.stroke = this._themeObj.default_link_color_g_hover, m.radius = this._themeObj.default_link_radius_g_hover, m.strokeWidth = this._themeObj.default_link_strokeWidth_g_hover, m.outlineStroke = "transparent", m.outlineWidth = this._themeObj.default_link_outlineWidth_g_hover); a.setType(d); a.setPaintStyle(l); a.setHoverPaintStyle(m); a.getOverlay("arrow_source").setVisible(!1);
        a.getOverlay("arrow_middle").setVisible(!1); a.getOverlay("arrow_target").setVisible(!0); b.source_id.indexOf("list_") >= 0 && (a.getOverlay("arrow_source").setVisible(!1), a.getOverlay("label_source").setVisible(!0)); b.target_id.indexOf("list_") >= 0 && (a.getOverlay("arrow_target").setVisible(!1), a.getOverlay("label_target").setVisible(!0)); b.arrows && b.arrows.length > 0 && (b.arrows[0] ? a.getOverlay("arrow_source").setVisible(!0) : a.getOverlay("arrow_source").setVisible(!1), b.arrows.length > 1 && b.arrows[1] ? a.getOverlay("arrow_middle").setVisible(!0) :
            a.getOverlay("arrow_middle").setVisible(!1), b.arrows.length > 2 && b.arrows[2] ? a.getOverlay("arrow_target").setVisible(!0) : a.getOverlay("arrow_target").setVisible(!1)); a.getOverlay("animation").width = this._themeObj.default_link_strokeWidth_g * 2; a.getOverlay("animation").length = this._themeObj.default_link_strokeWidth_g * 2; a.getOverlay("animation").setVisible(!1); g = b.title || b.label || ""; a.getOverlay("label").setVisible(g.length > 0); a.getOverlay("label").setLabel(g); g = b.label_source || ""; a.getOverlay("label_source").setVisible(g.length >
                0); a.getOverlay("label_source").setLabel(g); g = b.label_target || ""; a.getOverlay("label_target").setVisible(g.length > 0); a.getOverlay("label_target").setLabel(g); b.show_remove || f ? a.getOverlay("label_remove").setVisible(!0) : a.getOverlay("label_remove").setVisible(!1); c ? (a.getOverlay("arrow_source").setVisible(!1), a.getOverlay("arrow_middle").setVisible(!1), a.getOverlay("arrow_target").setVisible(!1)) : e && (a.getOverlay("arrow_source").width = this._themeObj.default_link_strokeWidth_g * 3, a.getOverlay("arrow_source").length =
                    this._themeObj.default_link_strokeWidth_g * 3, a.getOverlay("arrow_target").width = this._themeObj.default_link_strokeWidth_g * 3, a.getOverlay("arrow_target").length = this._themeObj.default_link_strokeWidth_g * 3, a.getOverlay("arrow_middle").width = this._themeObj.default_link_strokeWidth_g * 3, a.getOverlay("arrow_middle").length = this._themeObj.default_link_strokeWidth_g * 3); a.data = b; this.render_link && this.render_link(a, d, b)
    }, _paintConnectionState: function (a, b) {
        b == -1 || b == "error" ? a.setPaintStyle({
            stroke: this._themeObj.default_link_color_error,
            radius: this._themeObj.default_link_radius_error, strokeWidth: this._themeObj.default_link_strokeWidth_error, outlineStroke: "transparent", outlineWidth: this._themeObj.default_link_outlineWidth_error
        }) : b == 1 || b == "success" ? a.setPaintStyle({ stroke: this._themeObj.default_link_color_success, radius: this._themeObj.default_link_radius_success, strokeWidth: this._themeObj.default_link_strokeWidth_success, outlineStroke: "transparent", outlineWidth: this._themeObj.default_link_outlineWidth_success }) : b == 0 || b == "reject" ?
            a.setPaintStyle({ stroke: this._themeObj.default_link_color_reject, radius: this._themeObj.default_link_radius_reject, strokeWidth: this._themeObj.default_link_strokeWidth_reject, outlineStroke: "transparent", outlineWidth: this._themeObj.default_link_outlineWidth_reject }) : a.setPaintStyle({ stroke: this._themeObj.default_link_color, radius: this._themeObj.default_link_radius, strokeWidth: this._themeObj.default_link_strokeWidth, outlineStroke: "transparent", outlineWidth: this._themeObj.default_link_outlineWidth })
    },
    newInstance: function (a, b) {
        var d = this; d.containerId = a; d.isMobile = andflow_util.isMobile(); d.isMobile && (d.mousedown_event_name = "touchstart", d.mouseup_event_name = "touchend", d.mousemove_event_name = "touchmove", d.click_event_name = "touchend", d.dblclick_event_name = "longtap"); d = andflow_util.extend(d, b); d.flowModel == null && (d.flowModel = {}); d.flowModel.theme == null && (d.flowModel.theme = "flow_theme_default"); d.flowModel.link_type == null && (d.flowModel.link_type = "Flowchart"); d._connectionTypes[d.flowModel.link_type] ==
            null && (d.flowModel.link_type = "Flowchart"); d._initHtml(a); d._initMetadata(); d._initTheme(); d._initPlumb(); d._initEvents(); d._initAnimaction(); return d
    }, refresh: function () { this.flowModel = this.getFlow(); this._initTheme(); this._initPlumb(); this.showFlow(); this.setActionStates(); this.setLinkStates(); this.setActionContents() }, repaint: function () { this._plumb && this._plumb.repaintEverything() }, setTheme: function (a) {
        this.flowModel.theme = a || this.flowModel.theme || "flow_theme_default"; this._themeObj = flow_themes[this.flowModel.theme];
        a = document.getElementById(this.containerId).querySelector(".andflow"); for (var b in flow_themes) andflow_util.removeClass(a, b); andflow_util.addClass(a, this.flowModel.theme); this._plumb && this._plumb.repaintEverything()
    }, registActionScript: function (a, b) { this._actionScript[a] = b }, getActionScript: function (a) { return this._actionScript[a] }, getMetadata: function (a) { for (var b in this.metadata) { var d = this.metadata[b]; if (a == d.name) return d } return null }, getMetadatas: function () { return this.metadata }, getDict: function (a) {
        if (a ==
            null || a == "") return null; var b = this.getFlow().dict, d; for (d in b) { var c = b[d]; if (c.name == a) return c.label } return null
    }, getDicts: function () { return this.getFlow().dict }, getActionInfo: function (a) { return this.getAction(a) }, setActionInfo: function (a) { this._actionInfos[a.id] = a; this.renderAction(a) }, renderAction: function (a) {
        var b = document.getElementById(a.id); if (b && a.id != null) {
            var d = a.name; if (d != null) {
                var c = this.getMetadata(d) || {}, e = a.title || a.des || c.title || c.des || "", f = a.icon || c.icon || "", g = a.css || c.css || "",
                k = a.border_color, h = a.header_color, l = a.header_text_color, m = a.body_color, n = a.body_text_color, v = a.theme || c.theme || ""; c = a.content; var q = a.left, p = a.top, t = a.width, u = a.height, r = "", w = ""; (action_themes[v || ""] || this._themeObj).is_body_resizable && (r = a.body_width, w = a.body_height); g && g.length > 0 && andflow_util.addClass(b.querySelector(".action"), g); andflow_util.setAttr(b.querySelector(".action"), "title", e); andflow_util.setAttr(b.querySelector(".action"), "name", d); andflow_util.setAttr(b.querySelector(".action"),
                    "icon", f); for (var x in action_themes) andflow_util.removeClass(b, x); v && v.length > 0 && andflow_util.addClass(b, v); d = f && f.length > 0 && f.indexOf("base64") >= 0 ? f : f && f.length > 0 ? (this.img_path || "") + f : (this.img_path || "") + "node.png"; andflow_util.setAttr(b.querySelector(".action-icon img"), "src", d); this.setActionTitle(a.id, e); this.flowModel.show_action_body == "false" && andflow_util.hide(b.querySelector(".action-body")); this.flowModel.show_action_content == "false" && andflow_util.hide(b.querySelector(".action-content"));
                k && b.style.setProperty("--action-border-color", k); h && b.style.setProperty("--action-header-color", h); l && b.style.setProperty("--action-header-text-color", l); m && b.style.setProperty("--action-body-color", m); n && b.style.setProperty("--action-body-text-color", n); c && (typeof c === "string" && (c = { content_type: "msg", content: c }), this.setActionContent(a.id, c.content || "", c.content_type || "msg")); andflow_util.setStyle(b, "position", "absolute"); q && (q + "").indexOf("px") >= 0 ? andflow_util.setStyle(b, "left", q) : andflow_util.setStyle(b,
                    "left", q + "px"); p && (p + "").indexOf("px") >= 0 ? andflow_util.setStyle(b, "top", p) : andflow_util.setStyle(b, "top", p + "px"); t && (t && (t + "").indexOf("px") >= 0 ? andflow_util.setStyle(b.querySelector(".action-master"), "width", t) : andflow_util.setStyle(b.querySelector(".action-master"), "width", t + "px")); u && (u && (u + "").indexOf("px") >= 0 ? andflow_util.setStyle(b.querySelector(".action-master"), "height", u) : andflow_util.setStyle(b.querySelector(".action-master"), "height", u + "px")); r && r.length > 0 ? (andflow_util.setAttr(b, "body_width",
                        r), r.indexOf("px") < 0 && (r += "px"), andflow_util.setStyle(b.querySelector(".action-body"), "width", r)) : andflow_util.setStyle(b.querySelector(".action-body"), "width", ""); w && w.length > 0 ? (andflow_util.setAttr(b, "body_height", w), w.indexOf("px") < 0 && (w += "px"), andflow_util.setStyle(b.querySelector(".action-body"), "height", w)) : andflow_util.setStyle(b.querySelector(".action-body"), "height", "")
            }
        }
    }, delActionInfo: function (a) { this._actionInfos[a] = null }, setActionParam: function (a, b, d) {
        this._actionInfos && this._actionInfos[a] &&
        (this._actionInfos[a].params || (this._actionInfos[a].params = {}), this._actionInfos[a].params[b] = d)
    }, getActionParam: function (a, b) { return this._actionInfos && this._actionInfos[a] && this._actionInfos[a].params ? this._actionInfos[a].params[b] : null }, setActionBorderColor: function (a, b) { this._actionInfos && this._actionInfos[a] && (this._actionInfos[a].border_color = b, this.renderAction(this._actionInfos[a])) }, setActionHeaderColor: function (a, b) {
        this._actionInfos && this._actionInfos[a] && (this._actionInfos[a].header_color =
            b, this.renderAction(this._actionInfos[a]))
    }, setActionHeaderTextColor: function (a, b) { this._actionInfos && this._actionInfos[a] && (this._actionInfos[a].header_text_color = b, this.renderAction(this._actionInfos[a])) }, setActionBodyColor: function (a, b) { this._actionInfos && this._actionInfos[a] && (this._actionInfos[a].body_color = b, this.renderAction(this._actionInfos[a])) }, setActionBodyTextColor: function (a, b) { this._actionInfos && this._actionInfos[a] && (this._actionInfos[a].body_text_color = b, this.renderAction(this._actionInfos[a])) },
    getGroupInfo: function (a) { return this._groupInfos[a] }, setGroupInfo: function (a) { this._groupInfos[a.id] = a; this.renderGroup(a) }, renderGroup: function (a) {
        var b = document.getElementById(a.id); if (b) {
            var d = this.getMetadata(a.name) || {}, c = a.border_color, e = a.header_color, f = a.header_text_color, g = a.body_color, k = a.body_text_color, h = a.theme || d.theme || ""; d = a.members || []; for (var l in action_themes) andflow_util.removeClass(b, l); h && h.length > 0 && andflow_util.addClass(b, h); c && b.style.setProperty("--group-border-color", c);
            e && b.style.setProperty("--group-header-color", e); f && b.style.setProperty("--group-header-text-color", f); g && b.style.setProperty("--group-body-color", g); k && b.style.setProperty("--group-body-text-color", k); b.querySelector(".group-header") && (b.querySelector(".group-header").innerHTML = a.title || ""); b.querySelector(".group-body") && (b.querySelector(".group-body").innerHTML = a.des || ""); var m = document.querySelector("#" + this.containerId + " #canvas"); if (a.left == null || a.left == "auto") {
                if (d.length > 0) {
                    c = 9999999999999;
                    for (var n in d) e = document.getElementById(d[n]).offsetLeft - m.offsetLeft, c > e && (c = e); andflow_util.setStyle(b, "left", c - 10 + "px")
                }
            } else (a.left + "").indexOf("px") >= 0 ? andflow_util.setStyle(b, "left", a.left) : andflow_util.setStyle(b, "left", a.left + "px"); if (a.top == null || a.top == "auto") { if (d.length > 0) { c = 999999999; for (n in d) e = document.getElementById(d[n]).offsetTop - m.offsetTop, c > e && (c = e); andflow_util.setStyle(b, "top", c - 30 + "px") } } else (a.top + "").indexOf("px") >= 0 ? andflow_util.setStyle(b, "top", a.top) : andflow_util.setStyle(b,
                "top", a.top + "px"); if (a.width == null || a.width == "auto") { if (d.length > 0) { var v = 0; for (n in d) document.getElementById(d[n]).querySelectorAll("div").forEach(function (p, t) { p = p.offsetLeft + p.offsetWidth; p = p - b.offsetLeft - m.offsetLeft; p > v && (v = p) }); v += 10; andflow_util.setStyle(b.querySelector(".group-main"), "width", v) } } else (a.width + "").indexOf("px") >= 0 ? andflow_util.setStyle(b.querySelector(".group-main"), "width", a.width) : andflow_util.setStyle(b.querySelector(".group-main"), "width", a.width + "px"); if (a.height == null ||
                    a.height == "auto") { if (d.length > 0) { var q = 0; for (n in d) document.getElementById(d[n]).querySelector("div").forEach(function (p, t) { p = p.offsetTop + p.offsetHeight; p = p - b.offsetTop - m.offsetTop; p > q && (q = p) }); q += 10; andflow_util.setStyle(b.querySelector(".group-main"), "height", q) } } else (a.height + "").indexOf("px") >= 0 ? andflow_util.setStyle(b.querySelector(".group-main"), "height", a.height) : andflow_util.setStyle(b.querySelector(".group-main"), "height", a.height + "px")
        }
    }, getGroupTitle: function (a) { return this._groupInfos[a].title },
    setGroupTitle: function (a, b) { a = this._groupInfos[a]; a != null && (a.title = b, this._groupInfos[a.id] = a, document.querySelector("#" + this.containerId + " #" + a.id).querySelector(".group-header").innerHTML = a.title) }, setGroupBorderColor: function (a, b) { this._groupInfos[a] && (this._groupInfos[a].border_color = b, this.renderGroup(this._groupInfos[a])) }, setGroupHeaderColor: function (a, b) { this._groupInfos[a] && (this._groupInfos[a].header_color = b, this.renderGroup(this._groupInfos[a])) }, setGroupHeaderTextColor: function (a, b) {
        this._groupInfos[a] &&
        (this._groupInfos[a].header_text_color = b, this.renderGroup(this._groupInfos[a]))
    }, setGroupBodyColor: function (a, b) { this._groupInfos[a] && (this._groupInfos[a].body_color = b, this.renderGroup(this._groupInfos[a])) }, setGroupBodyTextColor: function (a, b) { this._groupInfos[a] && (this._groupInfos[a].body_text_color = b, this.renderGroup(this._groupInfos[a])) }, getListInfo: function (a) { return this._listInfos[a] }, setListInfo: function (a) { this._listInfos[a.id] = a; this.renderList(a) }, renderList: function (a) {
        var b = document.getElementById(a.id);
        if (b) {
            var d = a.id, c = this.getMetadata(a.name) || {}; c = a.theme || c.theme || ""; var e = a.border_color, f = a.header_color, g = a.header_text_color, k = a.body_color, h = a.body_text_color, l = a.item_color, m = a.item_text_color, n = a.items, v = a.left, q = a.top, p; for (p in action_themes) andflow_util.removeClass(b, p); c && c.length > 0 && andflow_util.addClass(b, c); b.querySelector(".list-header").innerHTML = a.title || ""; e && b.style.setProperty("--list-border-color", e); f && b.style.setProperty("--list-header-color", f); g && b.style.setProperty("--list-header-text-color",
                g); k && b.style.setProperty("--list-body-color", k); h && b.style.setProperty("--list-body-text-color", h); l && b.style.setProperty("--list-item-color", l); m && b.style.setProperty("--list-item-text-color", m); a.width != void 0 && a.width != null && ((a.width + "").indexOf("px") >= 0 ? andflow_util.setStyle(b.querySelector(".list-main"), "width", a.width) : andflow_util.setStyle(b.querySelector(".list-main"), "width", a.width + "px")); a.height != void 0 && a.height != null && ((a.height + "").indexOf("px") >= 0 ? andflow_util.setStyle(b.querySelector(".list-main"),
                    "height", a.height) : andflow_util.setStyle(b.querySelector(".list-main"), "height", a.height + "px")); (q + "").indexOf("px") >= 0 ? andflow_util.setStyle(b, "top", q) : andflow_util.setStyle(b, "top", q + "px"); (v + "").indexOf("px") >= 0 ? andflow_util.setStyle(b, "left", v) : andflow_util.setStyle(b, "left", v + "px"); this._setListItems(d, n)
        }
    }, getListTitle: function (a) { return (this._listInfos[a] || {}).title }, setListTitle: function (a, b) {
        a = this._listInfos[a]; a != null && (a.title = b, this._listInfos[a.id] = a, document.getElementById(a.id).querySelector(".list-header").innerHTML =
            a.title || "")
    }, getListItems: function (a) { return (this._listInfos[a] || {}).items }, setListItems: function (a, b) { var d = this._listInfos[a]; d != null && (d.items = b, this._listInfos[a] = d, this._setListItems(a, b), this.refresh()) }, setListBorderColor: function (a, b) { this._listInfos[a] && (this._listInfos[a].border_color = b, this.renderList(this._listInfos[a])) }, setListHeaderColor: function (a, b) { this._listInfos[a] && (this._listInfos[a].header_color = b, this.renderList(this._listInfos[a])) }, setListHeaderTextColor: function (a, b) {
        this._listInfos[a] &&
        (this._listInfos[a].header_text_color = b, this.renderList(this._listInfos[a]))
    }, setListBodyColor: function (a, b) { this._listInfos[a] && (this._listInfos[a].body_color = b, this.renderList(this._listInfos[a])) }, setListBodyTextColor: function (a, b) { this._listInfos[a] && (this._listInfos[a].body_text_color = b, this.renderList(this._listInfos[a])) }, setListItemColor: function (a, b) { this._listInfos[a] && (this._listInfos[a].item_color = b, this.renderList(this._listInfos[a])) }, setListItemTextColor: function (a, b) {
        this._listInfos[a] &&
        (this._listInfos[a].item_text_color = b, this.renderList(this._listInfos[a]))
    }, getTipInfo: function (a) { return this._tipInfos[a] }, setTipInfo: function (a) { this._tipInfos[a.id] = a; this.renderTip(a) }, renderTip: function (a) {
        var b = document.getElementById(a.id); if (b) {
            var d = this.getMetadata(a.name) || {}; d = a.theme || d.theme || ""; var c = a.content, e = a.border_color, f = a.body_color, g = a.body_text_color, k = a.header_color, h = a.header_text_color, l; for (l in action_themes) andflow_util.removeClass(b, l); d && d.length > 0 && andflow_util.addClass(b,
                d); (a.left + "").indexOf("px") >= 0 ? andflow_util.setStyle(b, "left", a.left) : andflow_util.setStyle(b, "left", a.left + "px"); (a.top + "").indexOf("px") >= 0 ? andflow_util.setStyle(b, "top", a.top) : andflow_util.setStyle(b, "top", a.top + "px"); (a.width + "").indexOf("px") >= 0 ? andflow_util.setStyle(b.querySelector(".tip-main"), "width", a.width) : andflow_util.setStyle(b.querySelector(".tip-main"), "width", a.width + "px"); (a.height + "").indexOf("px") >= 0 ? andflow_util.setStyle(b.querySelector(".tip-main"), "height", a.height) : andflow_util.setStyle(b.querySelector(".tip-main"),
                    "height", a.height + "px"); e && b.style.setProperty("--tip-border-color", e); k && b.style.setProperty("--tip-header-color", k); h && b.style.setProperty("--tip-header-text-color", h); f && b.style.setProperty("--tip-body-color", f); g && b.style.setProperty("--tip-body-text-color", g); c &&= c.replaceAll("\n", "<br/>"); b.querySelector(".tip-header").innerHTML = a.title || ""; b.querySelector(".tip-body").innerHTML = c || ""
        }
    }, getTipTitle: function (a) { return this._tipInfos[a] ? this._tipInfos[a].title : null }, setTipTitle: function (a, b) {
        if (this._tipInfos[a]) {
            var d =
                document.getElementById(a); this._tipInfos[a].title = b; d.querySelector(".tip-header").innerHTML = b || ""
        }
    }, getTipContent: function (a) { return this._tipInfos[a] ? this._tipInfos[a].content : null }, setTipContent: function (a, b) { if (this._tipInfos[a]) { var d = document.getElementById(a); this._tipInfos[a].content = b; d.querySelector(".tip-body").innerHTML = b || "" } }, setTipBorderColor: function (a, b) {
        if (this._tipInfos[a]) {
            var d = document.getElementById(a); this._tipInfos[a].border_color = b; d.style.setProperty("--tip-border-color",
                b)
        }
    }, setTipBodyColor: function (a, b) { if (this._tipInfos[a]) { var d = document.getElementById(a); this._tipInfos[a].body_color = b; d.style.setProperty("--tip-body-color", b) } }, setTipBodyTextColor: function (a, b) { if (this._tipInfos[a]) { var d = document.getElementById(a); this._tipInfos[a].body_text_color = b; d.style.setProperty("--tip-body-text-color", b) } }, getLinkInfo: function (a, b) { return this._linkInfos[a + "-" + b] || {} }, setLinkInfo: function (a) {
        var b = this._linkInfos[a.source_id + "-" + a.target_id]; b = andflow_util.extend(b,
            a); this._linkInfos[a.source_id + "-" + a.target_id] = b; this.renderLink(b)
    }, renderLink: function (a) { var b = this.getConnection(a.source_id, a.target_id); b != null && (this._paintConnection(b, a), this._plumb.repaintEverything()) }, delLinkInfo: function (a, b) { this._linkInfos[a + "-" + b] = null }, getLinkPaintStyle: function (a, b) { var d = this._linkInfos[d.source_id + "-" + d.target_id] || { source_id: a, target_id: b }; return d.paintStyle }, setLinkPaintStyle: function (a, b, d) {
        var c = this._linkInfos[c.source_id + "-" + c.target_id] || {
            source_id: a,
            target_id: b
        }; c.paintStyle = d; this.setLinkInfo(c)
    }, setLinkTitle: function (a, b, d) { var c = this._linkInfos[c.source_id + "-" + c.target_id] || { source_id: a, target_id: b }; c.title = d; this.setLinkInfo(c) }, getLinkTitle: function (a, b) { return (this._linkInfos[a + "-" + b] || {}).title }, setLinkLabel: function (a, b, d) { this.setLinkTitle(a, b, d) }, getLinkLabel: function (a, b) { return this.sgtLinkTitle(a, b) }, setLinkSourceLabel: function (a, b, d) {
        var c = this._linkInfos[c.source_id + "-" + c.target_id] || { source_id: a, target_id: b }; c.label_source = d;
        this.setLinkInfo(c)
    }, getLinkSourceLabel: function (a, b) { return (this._linkInfos[a + "-" + b] || {}).label_source }, setLinkTargetLabel: function (a, b, d) { var c = this._linkInfos[c.source_id + "-" + c.target_id] || { source_id: a, target_id: b }; c.label_target = d; this.setLinkInfo(c) }, getLinkTargetLabel: function (a, b) { return (this._linkInfos[a + "-" + b] || {}).label_target }, removeGroup: function (a, b) { a = this._plumb.getGroup(a); b = b || this._groupInfos[a.id].delete_all || !1; b != 1 && (b = !1); a.getEl(); this._plumb.removeGroup(a, b) }, removeList: function (a) {
        a =
        document.getElementById(a); this._plumb.remove(a); andflow_util.removeElement(a)
    }, removeTip: function (a) { a = document.getElementById(a); this._plumb.remove(a); andflow_util.removeElement(a) }, removeAction: function (a) {
        var b = document.getElementById(a); if (b) {
            var d = this._plumb.getGroups(), c; for (c in d) { var e = d[c].getMembers(), f; for (f in e) e[f].id == a && d[c].remove(b, null, !0) } this._plumb.remove(b); andflow_util.removeElement(b); b = this._actionInfos[a]; this.delActionInfo(a); this._actionCharts[a] = null; this._actionCharts[a] !=
                null && this._actionCharts[a].dispose(); this._actionContents[a] = null; this.event_action_remove && this.event_action_remove(b); this._onCanvasChanged()
        }
    }, removeLink: function (a, b) { var d = this.getConnection(a, b); d != null && (this.delLinkInfo(a, b), this._plumb.deleteConnection(d), this._plumb.repaintEverything(), this.event_link_remove && this.event_link_remove(this._linkInfos[a + "-" + b]), this._onCanvasChanged()) }, removeLinkBySource: function (a) {
        var b = this.getConnectionsBySource(a), d; for (d in b) {
            var c = b[d], e = c.targetId;
            this.delLinkInfo(a, e); this._plumb.deleteConnection(c); this._plumb.repaintEverything(); this.event_link_remove && this.event_link_remove(this._linkInfos[a + "-" + e]); this._onCanvasChanged()
        }
    }, removeLinkByTarget: function (a) { var b = this.getConnectionsByTarget(a), d; for (d in b) { var c = b[d], e = c.sourceId; this.delLinkInfo(e, a); this._plumb.deleteConnection(c); this._plumb.repaintEverything(); this.event_link_remove && this.event_link_remove(this._linkInfos[e + "-" + a]); this._onCanvasChanged() } }, setEditable: function (a) {
        this.editable =
        a; this.editable == 1 ? andflow_util.removeClass("#" + this.containerId + " .andflow", "state") : andflow_util.addClass("#" + this.containerId + " .andflow", "state")
    }, getEditable: function () { return this.editable }, setFlow: function (a) { this.flowModel = a }, showFlow: function (a) {
        var b = this; a && (this.flowModel = a); this._actionInfos = {}; this._linkInfos = {}; this._groupInfos = {}; this._listInfos = {}; this._tipInfos = {}; this._actionContents = {}; this._actionCharts = {}; this._action_states = []; this._link_states = []; this._plumb.deleteEveryConnection();
        document.querySelectorAll(".action").forEach(function (h, l) { h = h.parentElement; b._plumb.remove(h); andflow_util.removeElement(h) }); document.querySelectorAll(".group").forEach(function (h, l) { b._plumb.remove(h); andflow_util.removeElement(h) }); document.querySelectorAll(".tip").forEach(function (h, l) { b._plumb.remove(h); andflow_util.removeElement(h) }); document.querySelectorAll(".list-item").forEach(function (h, l) { b._plumb.remove(h); andflow_util.removeElement(h) }); this._plumb.removeAllGroups(!0); document.getElementById("canvas").innerHtml =
            ""; if ((a = this.flowModel) && a.actions) for (var d in a.actions) this._createAction(a.actions[d]); if (a && a.tips) for (d in a.tips) this._createTip(a.tips[d]); if (a && a.lists) for (var c in a.lists) this._createList(a.lists[c]); if (a && a.groups) for (var e in a.groups) this._createGroup(a.groups[e]); if (a && a.links) for (var f in a.links) d = a.links[f], c = this._plumb.connect({ source: d.source_id, target: d.target_id }), c != void 0 && c != null && this.setLinkInfo(d); for (var g in a.actions) {
                f = this._plumb.getEndpoints(a.actions[g].id); for (var k in f) d =
                    f[k], d.setPaintStyle({ stroke: this._themeObj.default_endpoint_stroke_color, fill: this._themeObj.default_endpoint_fill_color, radius: this._themeObj.default_endpoint_radius, strokeWidth: this._themeObj.default_endpoint_strokeWidth }), d.setHoverPaintStyle({ stroke: this._themeObj.default_endpoint_stroke_color_hover, fill: this._themeObj.default_endpoint_fill_color_hover, radius: this._themeObj.default_endpoint_radius_hover, strokeWidth: this._themeObj.default_endpoint_strokeWidth_hover })
            } this._plumb.repaintEverything()
    },
    getFlow: function () { var a = this.getActions(), b = this.getLinks(), d = this.getGroups(), c = this.getLists(), e = this.getTips(); this.flowModel.actions = a; this.flowModel.groups = d; this.flowModel.lists = c; this.flowModel.links = b; this.flowModel.tips = e; return this.flowModel }, clearActionState: function () { var a = document.querySelector("#" + this.containerId + " .action"); andflow_util.removeClass(a, "error"); andflow_util.removeClass(a, "execute"); andflow_util.removeClass(a, "reject"); andflow_util.removeClass(a, "success") }, setActionSelected: function (a,
        b) { a != null && a != "" && document.getElementById(a) && (b ? andflow_util.addClass(document.getElementById(a).querySelector(".action"), "selected") : andflow_util.removeClass(document.getElementById(a).querySelector(".action"), "selected")) }, setActionIcon: function (a, b) { b != null && b.length > 0 && andflow_util.setAttr(document.getElementById(a).querySelector(".action-icon img"), "src", this.img_path + b) }, setActionState: function (a, b) {
            if (a != null && a != "") if (a = document.getElementById(a).querySelector(".action"), b == null || b == "" ||
                b == 0) andflow_util.removeClass(a, "error"), andflow_util.removeClass(a, "execute"), andflow_util.removeClass(a, "reject"), andflow_util.removeClass(a, "success"); else if (b == -1 || b == "error") andflow_util.removeClass(a, "error"), andflow_util.removeClass(a, "execute"), andflow_util.removeClass(a, "reject"), andflow_util.removeClass(a, "success"), a.className.indexOf("error") < 0 && andflow_util.addClass(a, "error"); else if (b == 1 || b == "success") andflow_util.removeClass(a, "error"), andflow_util.removeClass(a, "execute"), andflow_util.removeClass(a,
                    "reject"), andflow_util.removeClass(a, "success"), a.className.indexOf("success") < 0 && andflow_util.addClass(a, "success"); else if (b == 0 || b == "reject") andflow_util.removeClass(a, "error"), andflow_util.removeClass(a, "execute"), andflow_util.removeClass(a, "reject"), andflow_util.removeClass(a, "success"), a.className.indexOf("reject") < 0 && andflow_util.addClass(a, "reject")
        }, setActionStates: function (a) {
            if (a == void 0 || a == null) a = this._action_states; this._action_states = a; document.querySelectorAll("#" + this.containerId +
                " .action").forEach(function (g, k) { andflow_util.removeClass(g, "success"); andflow_util.removeClass(g, "error"); andflow_util.removeClass(g, "execute") }); var b = {}; for (e in a) { var d = a[e].action_id; b[d] = a[e] } a = this.getActions(); for (var c in a) { d = a[c].id; var e = b[d]; if (e != null) { var f = e.state; e.is_error && (f = -1); this.setActionState(d, f); this.setActionIcon(d, e.action_icon); e = e.content; e.action_id = d; this.showActionContent(e) } }
        }, setLinkState(a, b, d) {
            a = this.getConnection(a, b); a != null && (b = a.data, b != null && b.active ==
                "false" || this._paintConnectionState(a, d))
        }, setLinkStates: function (a) { for (var b = this._plumb.getAllConnections(), d = 0; d < b.length; d++)this._paintConnectionState(b[d], 9); if (a == void 0 || a == null) a = this._link_states; this._link_states = a; for (d in a) { var c = a[d]; b = c.source_action_id; var e = c.target_action_id, f = c.state; c = c.is_error; if (c == 1 || c == 1 || c == "true") f = -1; this.setLinkState(b, e, f) } this._plumb.repaintEverything() }, setLinkType: function (a) { this.flowModel.link_type = a; this.refresh() }, getGroups: function () {
            var a =
                [], b = this._plumb.getGroups(), d; for (d in b) { var c = b[d], e = c.id, f = c.getEl(); c = c.getMembers(); e = this._groupInfos[e]; e.members = []; for (var g in c) e.members.push(c[g].id); e.left != "auto" && (e.left = f.offsetLeft + "px"); e.top != "auto" && (e.top = f.offsetTop + "px"); e.width != "auto" && (e.width = f.offsetWidth + "px"); e.height != "auto" && (e.height = f.offsetHeight + "px"); a.push(e) } return a
        }, getLists: function () {
            var a = this, b = []; document.querySelectorAll("#" + a.containerId + " #canvas .list").forEach(function (d, c) {
                c = d.id; c = a._listInfos[c] ||
                    { id: c, left: "", top: "", width: "", height: "" }; d.parentElement.className.indexOf("group-container") >= 0 ? (c.left = d.offsetLeft + d.parentElement.offsetLeft + "px", c.top = d.offsetTop + d.parentElement.offsetTop + "px") : (c.left = d.offsetLeft + "px", c.top = d.offsetTop + "px"); c.width = d.offsetWidth + "px"; c.height = d.offsetHeight + "px"; b.push(c)
            }); return b
        }, getTips: function () {
            var a = this, b = []; document.querySelectorAll("#" + a.containerId + " #canvas .tip").forEach(function (d, c) {
                c = d.id; c = a._tipInfos[c] || {
                    id: c, left: "", top: "", width: "",
                    height: ""
                }; d.parentElement.className.indexOf("group-container") >= 0 ? (c.left = d.offsetLeft + d.parentElement.offsetLeft + "px", c.top = d.offsetTop + d.parentElement.offsetTop + "px") : (c.left = d.offsetLeft + "px", c.top = d.offsetTop + "px"); c.width = d.offsetWidth + "px"; c.height = d.offsetHeight + "px"; b.push(c)
            }); return b
        }, getAction: function (a) {
            var b = document.getElementById(a), d = b.querySelector(".action"), c = this._actionInfos[a]; c == null && (c = {}); let e = b.parentElement.className.indexOf("group-container") >= 0; c.id = a; c.name = andflow_util.getAttr(d,
                "name") || c.name; c.title = andflow_util.getAttr(d, "title") || c.title; c.icon = andflow_util.getAttr(d, "icon") || c.icon; c.des = andflow_util.getAttr(d, "des") || c.des; c.tp = andflow_util.getAttr(d, "tp") || c.tp; e ? (c.left = b.offsetLeft + b.parentElement.offsetLeft + "px", c.top = b.offsetTop + b.parentElement.offsetTop + "px") : (c.left = b.offsetLeft + "px", c.top = b.offsetTop + "px"); c.width = b.offsetWidth + "px"; c.height = b.offsetHeight + "px"; c.body_width = andflow_util.getAttr(b, "body_width"); c.body_height = andflow_util.getAttr(b, "body_height");
            return c
        }, getActions: function () { var a = this, b = []; document.querySelector("#" + this.containerId + " #canvas").querySelectorAll(".action").forEach(function (d, c) { d = a.getAction(d.parentElement.id); b.push(d) }); return b }, getLinks: function () { for (var a = [], b = this._plumb.getAllConnections(), d = 0; d < b.length; d++) { var c = b[d].sourceId, e = b[d].targetId, f = this._linkInfos[c + "-" + e]; f == null && (f = {}); f.source_id = c; f.target_id = e; this._linkInfos[c + "-" + e] = f; a.push(f) } return a }, getConnection: function (a, b) {
            for (var d = this._plumb.getAllConnections(),
                c = 0; c < d.length; c++) { var e = d[c].targetId; if (d[c].sourceId == a && e == b) return d[c] } return null
        }, getConnectionsBySource: function (a) { for (var b = this._plumb.getAllConnections(), d = [], c = 0; c < b.length; c++)b[c].sourceId == a && d.push(b[c]); return d }, getConnectionsByTarget: function (a) { for (var b = this._plumb.getAllConnections(), d = [], c = 0; c < b.length; c++)b[c].targetId == a && d.push(b[c]); return d }, horizontal: function () {
            var a = 999999999, b = this.getFlow(), d; for (d in b.actions) {
                var c = b.actions[d].top; c = c.replace(/px/gi, ""); a > c &&
                    (a = c)
            } a < 10 && (a = 10); for (d in b.actions) b.actions[d].top = a + "px"; this.showFlow(b); this.setActionStates(this._action_states); this.setLinkStates(this._link_states)
        }, vertical: function () { var a = 999999999, b = this.getFlow(), d; for (d in b.actions) { var c = b.actions[d].top; c = c.replace(/px/gi, ""); a > c && (a = c) } a < 10 && (a = 10); for (d in b.actions) b.actions[d].left = a + "px"; this.showFlow(b); this.setActionStates(this._action_states); this.setLinkStates(this._link_states) }, test: function () { alert(html2canvas); alert(jsPlumb.getInstance) },
    getSnapshot: function (a, b) {
        if (andflow_util.isVisible("#canvas")) {
            var d = { backgroundColor: "white", ignore_svg: !1 }; b && (d = andflow_util.extend(d, b)); b = document.getElementById("canvas"); b.getBoundingClientRect(); var c = andflow_util.getPageLeft(b), e = andflow_util.getPageTop(b), f = b.scrollWidth, g = b.scrollHeight, k = d.scale || 1, h = document.createElement("canvas"); document.body.append(h); h.style.width = f + "px"; h.style.height = g + "px"; html2canvas(b, {
                canvas: h, scale: k, allowTaint: !0, foreignObjectRendering: !0, backgroundColor: d.backgroundColor ||
                    "transparent", dpi: 300, width: f, height: g, x: -c, y: -e, scrollX: 0, scrollY: 0, useCORS: !0, ignoreElements: l => !1
            }).then(function (l) { a && a(l) }); andflow_util.removeElement(h)
        }
    }, snap: function (a) { a = a || "andflow"; this.getSnapshot(function (b) { b = b.toDataURL("image/jpeg"); andflow_util.parseHtml('<a href="' + b + '" download="' + a + '.jpeg"></a>').click() }, { scale: 1, backgroundColor: "white", ignore_svg: !1 }) }, setActionContents: function (a) {
        a && (this._actionContents = a); if (this._actionContents != null && this._actionContents.length != 0) for (var b in this._actionContents) a =
            this._actionContents[b], this.setActionContent(b, a.content, a.content_type)
    }, getActionTitle: function (a) { return this._actionInfos[a].title }, setActionTitle: function (a, b) { b = b || ""; this._actionInfos[a].title = b; if (a = document.getElementById(a).querySelector(".action-header, [name='title']")) a.innerHTML = b }, setActionTheme: function (a, b) {
        this._actionInfos[a].theme = b; for (var d in flow_themes) andflow_util.removeClass(document.getElementById(a), d); andflow_util.addClass(document.getElementById(a), b); this._plumb &&
            this._plumb.repaintEverything()
    }, getActionContent: function (a) { return this._actionContents[a] }, setActionContent: function (a, b, d) {
        if (a != void 0 && a != null && a != "" && this._actionInfos[a] != null && (this._actionInfos[a].content = { content_type: d, content: b }, this._actionContents[a] = { content_type: d, content: b }, this.flowModel.show_action_content != 0 && this.flowModel.show_action_content != "false")) {
            var c = document.getElementById(a).querySelectorAll('.action-content,[name="content"]'); c && c.length != 0 && c.forEach(e => {
                switch (d) {
                    case "msg": this._actionCharts[a] !=
                        null && (this._actionCharts[a].dispose(), this._actionCharts[a] = null); e.innerHTML = "<div class='action-msg'>" + b + "</div>"; break; case "keyvalue": var f = JSON.parse(b), g = andflow_util.parseHtml('<table class="action-result-table" style="width:100%"></table>'); for (q in f) { var k = andflow_util.parseHtml('<tr><td class="action-result-label">' + q + '</td><td class="action-result-value">' + f[q] + "</td></tr>"); g.appendChild(k) } e.innerHTML = ""; e.appendChild(g); andflow_util.setStyle(e, "overflow-y", "auto"); break; case "grid": this._actionCharts[a] !=
                            null && (this._actionCharts[a].dispose(), this._actionCharts[a] = null); g = JSON.parse(b); var h = g.columns; f = g.rows; var l = []; f instanceof Array ? l = f : l.push(f); if (h == null || h.length == 0) if (h = [], l.length > 0) for (q in l[0]) h.push({ name: q, title: q }); g = andflow_util.parseHtml('<table class="table" style="width:100%"></table>'); f = andflow_util.parseHtml("<tr></tr>"); for (var m in h) k = andflow_util.parseHtml("<th>" + (h[m].title || h[m].name) + "</th>"), f.appendChild(k); g.appendChild(f); for (var n in l) {
                                k = l[n]; f = []; if (k instanceof
                                    Object) for (q in h) f.push(k[h[q].name]); else f.push(k); var v = andflow_util.parseHtml("<tr></tr>"); for (m in f) k = f[m], k instanceof Object && (k = JSON.stringify(k)), k = andflow_util.parseHtml("<td>" + k + "</td>"), v.appendChild(k); g.appendChild(v)
                            } e.innerHTML = ""; e.appendChild(g); andflow_util.setStyle(e, "overflow-y", "auto"); break; case "html": this._actionCharts[a] != null && (this._actionCharts[a].dispose(), this._actionCharts[a] = null); e.innerHTML = "<div class='action-html'>" + b + "</div>"; break; case "chart": var q = JSON.parse(b);
                        h = "chart_" + a; m = e.querySelector("#" + h); n = this._actionCharts[a]; n != null && m || (e.innerHTML = "<div id='" + h + "' class='action-chart'></div>", m = e.offsetWidth, n = e.offsetHeight, e = e.querySelector("#" + h), andflow_util.setStyle(e, "width", m + "px"), andflow_util.setStyle(e, "height", n + "px"), n = echarts.init(document.getElementById(h))); n.setOption(q); this._actionCharts[a] = n; break; case "form": this._actionCharts[a] != null && (this._actionCharts[a].dispose(), this._actionCharts[a] = null); f = JSON.parse(b); e.innerHTML = '<iframe src="' +
                            f.url + '" style="width:100%;height: 100%;" frameborder="0"></iframe>'; break; case "web": this._actionCharts[a] != null && (this._actionCharts[a].dispose(), this._actionCharts[a] = null); e.innerHTML = '<iframe src="' + b + '" style="width:100%;height: 100%;" frameborder="0"></iframe>'; break; default: this._actionCharts[a] != null && (this._actionCharts[a].dispose(), this._actionCharts[a] = null), e.innerHTML = b
                }
            })
        }
    }, showAllActionContent: function (a) { if (a) for (var b in a) { var d = a[b].content; d != null && this.showActionContent(d) } },
    showActionContent: function (a) { a != null && a.content_type != null && a.content != null && this.setActionContent(a.action_id, a.content, a.content_type) }, setActionBodyVisible: function (a) { this.flowModel.show_action_body = a ? "true" : "false"; this.flowModel.show_action_body == "false" ? document.querySelectorAll("#" + this.containerId + " .action-body").forEach(function (b) { andflow_util.hide(b) }) : document.querySelectorAll("#" + this.containerId + " .action-body").forEach(function (b) { andflow_util.show(b) }) }, setActionContentVisible: function (a) {
        this.flowModel.show_action_content =
        a ? "true" : "false"; this.flowModel.show_action_content == "false" || this.flowModel.show_action_content == 0 ? document.querySelectorAll("#" + this.containerId + " .action-content").forEach(function (b) { andflow_util.hide(b) }) : document.querySelectorAll("#" + this.containerId + " .action-content").forEach(function (b) { andflow_util.show(b) })
    }
};